<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Primrose</name>
    </assembly>
    <members>
        <member name="T:Primrose.ArrayConstants">
            <summary>Fixed arrays intended for reuse where an array would otherwise be allocated. Modify at your own risk!</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.Null">
            <summary>An array with a single null character</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.Comma">
            <summary>An array with a single comma character</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.Period">
            <summary>An array with a single period character</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.Braces">
            <summary>An array with the brace characters</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.Space">
            <summary>An array with a single space character</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.Quotes">
            <summary>An array with a list quote characters</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.NewLineChar">
            <summary>An array with a list of newline characters</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.NewLines">
            <summary>An array with a list of newline character combinations</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.DecimalDigits">
            <summary>An array with a list of decimal characters in order of value</summary>
        </member>
        <member name="F:Primrose.ArrayConstants.HexadecimalDigits">
            <summary>An array with a list of hexadecimal characters in order of value</summary>
        </member>
        <member name="T:Primrose.Build">
            <summary>Provides internal build information for this project</summary> 
        </member>
        <member name="F:Primrose.Build.Time">
            <summary>The time of build</summary> 
        </member>
        <member name="F:Primrose.Build.BuildDate">
            <summary>The date of build in YYYYMMDD format</summary> 
        </member>
        <member name="F:Primrose.Build.Revision">
            <summary>The daily revision number of the build</summary> 
        </member>
        <member name="T:Primrose.VoidDelegate">
            <summary>A delegate with no parameters</summary>
        </member>
        <member name="T:Primrose.ActionDelegate`1">
            <summary>A delegate with one parameter</summary>
        </member>
        <member name="T:Primrose.FuncDelegate`1">
            <summary>A function delegate with no parameters</summary>
        </member>
        <member name="T:Primrose.FuncDelegate`2">
            <summary>A function delegate with one parameter</summary>
        </member>
        <member name="T:Primrose.MessageDelegate">
            <summary>A delegate representing a receipt of a string message</summary>
            <param name="message">Represents message received</param>
        </member>
        <member name="T:Primrose.MessageDelegate`1">
            <summary>A delegate representing a receipt of a typed message</summary>
            <typeparam name="T">The type of the message</typeparam>
            <param name="message">Represents message received</param>
        </member>
        <member name="T:Primrose.Diagnostics.PerformanceMonitor">
            <summary>Sets up runtime monitoring of functions</summary>
        </member>
        <member name="M:Primrose.Diagnostics.PerformanceMonitor.#ctor">
            <summary>Sets up runtime monitoring of functions</summary>
        </member>
        <member name="F:Primrose.Diagnostics.PerformanceMonitor.LogPath">
            <summary>Determines the file path where monitoring report will be written to</summary>
        </member>
        <member name="F:Primrose.Diagnostics.PerformanceMonitor.Report">
            <summary>Retrieves the most recent report</summary>
        </member>
        <member name="F:Primrose.Diagnostics.PerformanceMonitor.Properties">
            <summary>Allows user applications to register their own values in properties</summary>
        </member>
        <member name="F:Primrose.Diagnostics.PerformanceMonitor.ShowProperties">
            <summary>Determines which user properties would be included in the report</summary>
        </member>
        <member name="P:Primrose.Diagnostics.PerformanceMonitor.Enabled">
            <summary>Determines whether monitoring functions are enabled</summary>
        </member>
        <member name="M:Primrose.Diagnostics.PerformanceMonitor.Create(System.String)">
            <summary>Creates a Performance countering element. The monitor will be notified on disposal</summary>
        </member>
        <member name="M:Primrose.Diagnostics.PerformanceMonitor.Clear">
            <summary>Clears existing data and logged reports</summary>
        </member>
        <member name="M:Primrose.Diagnostics.PerformanceMonitor.Print">
            <summary>Writes the Report to the file indicated by LogPath</summary>
        </member>
        <member name="M:Primrose.Diagnostics.PerformanceMonitor.UpdateReport">
            <summary>Updates the Report</summary>
        </member>
        <member name="T:Primrose.FileFormats.Common.IFile">
            <summary>Defines an interface for reading and writing to a file</summary>
        </member>
        <member name="M:Primrose.FileFormats.Common.IFile.ReadFromFile(System.String)">
            <summary>Opens and reads information from a source file</summary>
            <param name="filePath">The file to read from</param>
        </member>
        <member name="M:Primrose.FileFormats.Common.IFile.WriteToFile(System.String)">
            <summary>Writes information to a destination file</summary>
            <param name="destinationPath">The file to write to</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.DuplicateResolutionPolicy">
            <summary>Determines the policy for resolving duplicate entries</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.DuplicateResolutionPolicy.THROW">
            <summary>Throws an exception</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.DuplicateResolutionPolicy.OLD">
            <summary>Use the old value</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.DuplicateResolutionPolicy.NEW">
            <summary>Use the new value</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.DuplicateResolutionPolicy.BOTH">
            <summary>Write both values</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIAttributeExt">
            <summary>Defines external methods for INI attributes</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIEmbedObjectAttribute">
            <summary>Signals to the INIFile LoadField method to load the fields contained in the class / struct </summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIEmbedObjectAttribute.#ctor(System.String)">
            <summary>Signals to the INIFile LoadField method to load the fields contained in the class / struct </summary>
            <param name="overrideSection">The section name of the INI file where the key is based on</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIEmbedObjectAttribute.#ctor">
            <summary>Signals to the INIFile LoadField method to load the fields contained in the class / struct </summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIEmbedObjectAttribute.Section">
            <summary>The section name of the INI file where the keys in the attributed object are based on</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIFileConfigurationAttribute">
            <summary>Defines settings for an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFileConfigurationAttribute.SupportSectionInheritance">
            <summary>Indicates if section inheritance is supported</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFileConfigurationAttribute.AllowGlobalSection">
            <summary>Indicates a global section (key-values prior to the first section declaration) is allowed</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFileConfigurationAttribute.DuplicateSectionPolicy">
            <summary>Determines the policy for handling duplicate sections</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFileConfigurationAttribute.CommentDelimiters">
            <summary>Defines the delimiters for identifying the start of comments</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFileConfigurationAttribute.SectionInheritanceDelimiter">
            <summary>Defines the delimiter for identifying the start of a section inheritance list</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFileConfigurationAttribute.KeyValueDelimiter">
            <summary>Defines the delimiter for a key-value pair</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFileConfigurationAttribute.#ctor">
            <summary>Defines settings for an INI file</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIHeaderAttribute">
            <summary>Defines a value from a section header of an INI file</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIHeaderAttribute.#ctor">
            <summary>Defines a value from a section header of an INI file</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIKeyListAttribute">
            <summary>Defines a list of keys from a section of an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIKeyListAttribute.Section">
            <summary>The section name of the INI file where the keys are based on</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIKeyListAttribute.ValueSource">
            <summary>Defines whether the values are read instead of keys</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIKeyListAttribute.Required">
            <summary>Defines whether the INI file must contain this section/key combination</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIKeyListAttribute.#ctor(System.String,Primrose.FileFormat.INI.ValueSource,System.Boolean)">
            <summary>Defines a list of keys from a section of an INI file</summary>
            <param name="section">The section name from which the keys are retrieved</param>
            <param name="valueSource">Defines whether the values are read instead of keys</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIKeyListAttribute.#ctor(System.Boolean)">
            <summary>Defines a list of keys from a section of an INI file</summary>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIRegistryAttribute">
            <summary>Defines a list of keys from a section of an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIRegistryAttribute.Section">
            <summary>The section name of the INI file where the keys are based on</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIRegistryAttribute.Required">
            <summary>Defines whether the INI file must contain this section/key combination</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIRegistryAttribute.NoWriteValue">
            <summary>If the value string matches this value, skip this line when writing to file</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIRegistryAttribute.#ctor(System.String,System.Boolean)">
            <summary>Defines a list of keys from a section of an INI file</summary>
            <param name="section">The section name from which the keys are retrieved</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIRegistryAttribute.#ctor(System.Boolean)">
            <summary>Defines a list of keys from a section of an INI file</summary>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INISubSectionKeyListAttribute">
            <summary>Reads a section whose keys redirect to other sections of an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionKeyListAttribute.Section">
            <summary>The section name of the INI file where the keys are based on</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionKeyListAttribute.SubsectionPrefix">
            <summary>The subsection prefix to be used when writing members</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionKeyListAttribute.ValueSource">
            <summary>Defines whether the values are read instead of keys</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionKeyListAttribute.Required">
            <summary>Defines whether the INI file must contain this section/key combination</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INISubSectionKeyListAttribute.#ctor(System.String,System.String,Primrose.FileFormat.INI.ValueSource,System.Boolean)">
            <summary>Defines a value that redirects to other sections of an INI file</summary>
            <param name="section">The section name from which the keys are retrieved. If null, the field name is used</param>
            <param name="subsectionPrefix">The subsection prefix to be used when writing members. If null, the section name is used</param>
            <param name="valueSource">Defines whether the values are read instead of keys</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INISubSectionListAttribute">
            <summary>Defines a value that redirects to other sections of an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionListAttribute.Section">
            <summary>The section name of the INI file where the keys are based on</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionListAttribute.SubsectionPrefix">
            <summary>The subsection prefix to be used when writing members</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionListAttribute.Key">
            <summary>The key name of the INI file where the value is read</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionListAttribute.Required">
            <summary>Defines whether the INI file must contain this section/key combination</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INISubSectionListAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>Defines a value that redirects to other sections of an INI file</summary>
            <param name="section">The section name from which the keys are retrieved</param>
            <param name="key">The key name from which the value is retrieved</param>
            <param name="subsectionPrefix">The subsection prefix to be used when writing members. If null, the key name is used</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INISubSectionRegistryAttribute">
            <summary>Reads a section whose keys redirect to other sections of an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionRegistryAttribute.Section">
            <summary>The section name of the INI file where the keys are based on</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionRegistryAttribute.SubsectionPrefix">
            <summary>The subsection prefix to be used when writing members</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INISubSectionRegistryAttribute.Required">
            <summary>Defines whether the INI file must contain this section/key combination</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INISubSectionRegistryAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>Defines a value that redirects to other sections of an INI file</summary>
            <param name="section">The section name from which the keys are retrieved. If null, the field name is used</param>
            <param name="subsectionPrefix">The subsection prefix to be used when writing members. If null, the section name is used</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIValueAttribute">
            <summary>Defines a value from a section and key of an INI file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIValueAttribute.Section">
            <summary>The section name of the INI file where the key is based on</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIValueAttribute.Key">
            <summary>The key name of the INI file where the value is read</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIValueAttribute.NoWriteValue">
            <summary>If the value string matches this value, skip this line when writing to file</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIValueAttribute.Required">
            <summary>Defines whether the INI file must contain this section/key combination</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIValueAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <summary>Defines a value from a section and key of an INI file</summary>
            </summary>
            <param name="section">The section name from which the key-value is retrieved</param>
            <param name="key">The key name from which the value is retrieved</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIValueAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            <summary>Defines a value from a section and key of an INI file</summary>
            </summary>
            <param name="key">The key name from which the value is retrieved</param>
            <param name="required">Defines whether the INI file must contain this section/key combination</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIFile">
            <summary>Defines a standard for INI configuration file format</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIFile.INISection">
            <summary>Defines a section within an INI configuration file format</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIFile.INISection.INIHeaderLine">
            <summary>Defines the header line within a section within an INI configuration file format</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFile.INISection.INIHeaderLine.Header">
            <summary>The header</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFile.INISection.INIHeaderLine.Inherits">
            <summary>Defines what other sections this section may inherit its values from</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.INIHeaderLine.ToString">
            <summary>Provides a string representation of the line</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIFile.INISection.INILine">
            <summary>Defines a line within a section within an INI configuration file format</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFile.INISection.INILine.Key">
            <summary>The key associated in this line</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFile.INISection.INILine.Value">
            <summary>The value associated in this line</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.INISection.INILine.HasKey">
            <summary>Denotes if this line has a key</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.INISection.INILine.HasValue">
            <summary>Denotes if this line has a value</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.INILine.ToString">
            <summary>Provides a string representation of the line</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.ToString">
            <summary>Provides a string representation of the INISection</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.INISection.Header">
            <summary>The name of the section</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.INISection.Inherits">
            <summary>Defines what other sections this section may inherit its values from</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.INISection.Lines">
            <summary>The content of the section</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.GetKeys">
            <summary>Retrieves the list containing all non-empty keys in the section</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.GetValues">
            <summary>Retrieves the list containing all values in the section</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.HasKey(System.String)">
            <summary>Determines if a key is defined in the section</summary>
            <param name="key">The key name</param>
            <returns>True if the section and key is defined in the section</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.GetLine(System.String)">
            <summary>Retrieves the line containing the key in the section</summary>
            <param name="key">The key name</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.GetValue(System.String,System.String)">
            <summary>Retrieves the value associated with the key in the section</summary>
            <param name="key">The key name</param>
            <param name="defaultvalue">The default value, if the key is not found</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.SetValue(System.String,System.String)">
            <summary>Adds or sets the value associated with the key in the section</summary>
            <param name="key">The key name</param>
            <param name="value">The new value to be assigned to the key</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.RemoveKey(System.String)">
            <summary>Removes the key from the section</summary>
            <param name="key">The key name</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.Clear">
            <summary>Clears all keys from the section</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.INISection.Merge(Primrose.FileFormat.INI.INIFile.INISection)">
            <summary>Merges the content of this section with another section</summary>
            <param name="section">The name of the other section</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.GetString(System.String,System.String,System.String)">
            <summary>
            Gets a string value from the INIFile 
            </summary>
            <param name="section">The section containing the key-value pair</param>
            <param name="key">The key containing the value</param>
            <param name="defaultValue">The default value</param>
            <returns>The value belonging to the section and key in the INIFile. If the key does not exist, returns defaultValue</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.GetValue``1(System.String,System.String,Primrose.Primitives.Parsers.IResolver,``0)">
            <summary>Gets a value from the INIFile</summary>
            <param name="section">The section containing the key-value pair</param>
            <param name="key">The key containing the value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>The value belonging to the section and key in the INIFile. If the key does not exist, returns defaultValue</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.GetValueX``1(System.String,System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Gets a value from the INIFile</summary>
            <param name="section">The section containing the key-value pair</param>
            <param name="key">The key containing the value</param>
            <param name="resolver">A string resolver function</param>
            <returns>The value belonging to the section and key in the INIFile. If the key does not exist, returns defaultValue</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.SetEmptyKey(System.String,System.String)">
            <summary>
            Sets an empty value in the INIFile 
            </summary>
            <param name="section">The section that will contain the key</param>
            <param name="key">The key that will be set</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.SetString(System.String,System.String,System.String)">
            <summary>
            Sets a string value in the INIFile 
            </summary>
            <param name="section">The section that will contain the key-value pair</param>
            <param name="key">The key that will contain the value</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.SetValue``1(System.String,System.String,``0)">
            <summary>Sets a value from the INIFile </summary>
            <param name="section">The section that will contain the key-value pair</param>
            <param name="key">The key that will contain the value</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.LoadByAttribute``1(``0@,System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Passes the elements into the fields of another class</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.UpdateByAttribute``1(``0@,System.String)">
            <summary>Updates the elements from the fields of another class</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.INIFile.PreHeaderSectionName">
            <summary>The internal name of the global section</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.ListDelimiter">
            <summary>The default list delimiter used in an INIFile class</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.#ctor">
            <summary>Initializes an empty INI file</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.#ctor(System.String)">
            <summary>Initializes an INI file with a given filepath</summary>
            <param name="filepath">The path of the file to be interpreted</param>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.Attributes">
            <summary>The configuration attributes of the format</summary>
        </member>
        <member name="P:Primrose.FileFormat.INI.INIFile.Sections">
            <summary>The sections contained within the format</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.Reset">
            <summary>Clears all information in the format</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.HasSection(System.String)">
            <summary>Determines if a section is defined in the file</summary>
            <param name="section">The section name</param>
            <returns>True if the section is defined in the file</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.HasKey(System.String,System.String)">
            <summary>Determines if a key is defined in the file</summary>
            <param name="section">The section name</param>
            <param name="key">The key name</param>
            <returns>True if the section and key is defined in the file</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.GetSection(System.String)">
            <summary>Gets a section from the file</summary>
            <param name="section">The section name</param>
            <returns>The INISection object representing the section in the file</returns>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.ReadFromStream(System.IO.StreamReader,System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Reads and parses the INI file from a data stream</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.ReadFromStream(System.IO.Stream,System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Reads and parses the INI file from a data stream</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.ReadFromFile(System.String)">
            <summary>Reads and parses the INI file from a source file</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.ReadFromFile(System.String,System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Reads and parses the INI file from a source file</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.Read(System.IO.StreamReader)">
            <summary>Reads and parses INI data from a source</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.WriteToFile(System.String)">
            <summary>Writes the INI data into a file</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.WriteToStream(System.IO.StreamWriter)">
            <summary>Writes the INI data into a stream</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.WriteToStream(System.IO.Stream)">
            <summary>Writes the INI data into a stream</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIFile.Write(System.IO.StreamWriter)">
            <summary>Writes the INI data into a destination</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.ValueSource">
            <summary>Defines where a desired value is stored in a [key=value] format</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.ValueSource.KEY_ONLY">
            <summary>The desired value is taken from the key only, ignoring the value</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.ValueSource.VALUE_ONLY">
            <summary>The desired value is taken from the value only, ignoring all items with only the key</summary>
        </member>
        <member name="F:Primrose.FileFormat.INI.ValueSource.VALUE_OR_KEY">
            <summary>The desired value is taken first from the value, then from the key if the value does not exist</summary>
        </member>
        <member name="T:Primrose.FileFormat.INI.INISectionNotFoundException">
            <summary>Represents an exception as a result of a missing section</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INISectionNotFoundException.#ctor(System.String)">
            <summary>Represents an exception as a result of a missing section</summary>
            <param name="section">The missing section</param>
        </member>
        <member name="T:Primrose.FileFormat.INI.INIKeyNotFoundException">
            <summary>Represents an exception as a result of a missing section key</summary>
        </member>
        <member name="M:Primrose.FileFormat.INI.INIKeyNotFoundException.#ctor(System.String,System.String)">
            <summary>Represents an exception as a result of a missing section key</summary>
            <param name="section">The section where the key is missing</param>
            <param name="key">The missing key</param>
        </member>
        <member name="T:Primrose.FileFormat.JSON.JSONValueType">
            <summary>Denotes the type of a JSON object</summary>
        </member>
        <member name="F:Primrose.FileFormat.JSON.JSONValueType.NULL">
            <summary>Denotes a null value</summary>
        </member>
        <member name="F:Primrose.FileFormat.JSON.JSONValueType.BOOLEAN">
            <summary>Denotes a boolean value</summary>
        </member>
        <member name="F:Primrose.FileFormat.JSON.JSONValueType.NUMERIC">
            <summary>Denotes a numeric value. Typically this is compatible with double</summary>
        </member>
        <member name="F:Primrose.FileFormat.JSON.JSONValueType.STRING">
            <summary>Denotes a string object</summary>
        </member>
        <member name="F:Primrose.FileFormat.JSON.JSONValueType.ARRAY">
            <summary>Denotes an array of JSON-compatible values</summary>
        </member>
        <member name="F:Primrose.FileFormat.JSON.JSONValueType.OBJECT">
            <summary>Denotes a JSON object, with unordered pairs of string keys and JSON-compatible values</summary>
        </member>
        <member name="T:Primrose.FileFormat.JSON.JSONValue">
            <summary>Holds a JSON-compatible value or object</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Boolean)">
            <summary>Creates a JSON-compatible boolean value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Single)">
            <summary>Creates a JSON-compatible float value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Double)">
            <summary>Creates a JSON-compatible double value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Int32)">
            <summary>Creates a JSON-compatible int value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.UInt32)">
            <summary>Creates a JSON-compatible uint value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Int64)">
            <summary>Creates a JSON-compatible long value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.UInt64)">
            <summary>Creates a JSON-compatible ulong value</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.String)">
            <summary>Creates a JSON-compatible string object</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Collections.Generic.IEnumerable{Primrose.FileFormat.JSON.JSONValue})">
            <summary>Creates a JSON-compatible array object, copying the array elements</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.#ctor(System.Collections.Generic.IEnumerable{Primrose.Primitives.ValueTypes.Pair{System.String,Primrose.FileFormat.JSON.JSONValue}})">
            <summary>Creates a JSON-compatible string object, copying the object elements</summary>
        </member>
        <member name="M:Primrose.FileFormat.JSON.JSONValue.Get">
            <summary>Retrieves the value as an object</summary>
        </member>
        <member name="T:Primrose.Log">
            <summary>Handles logging behaviour for the program</summary>
        </member>
        <member name="F:Primrose.Log.LOG_EXT">
            <summary>The default log extension appended to log files, unless explicitly defined</summary>
        </member>
        <member name="F:Primrose.Log.DirectoryPath">
            <summary>The log directory path specified for created log channels.</summary>
        </member>
        <member name="M:Primrose.Log.Define(System.String,System.String)">
            <summary>Associates a log channel with a log file. If the channel does not yet exist, create it</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <param name="path">The path of the log file</param>
        </member>
        <member name="M:Primrose.Log.Define(System.String,System.IO.TextWriter)">
            <summary>Associates a log channel with a TextWriter. If the channel does not yet exist, create it</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <param name="writer">The TextWriter to associate with the log channel</param>
        </member>
        <member name="M:Primrose.Log.SetLogLevel(System.String,Primrose.LogLevel)">
            <summary>Set the logging levels for a log channel. If the channel does not yet exist, create it</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <param name="logLevel">The logging levels that will be printed into the log channel</param>
        </member>
        <member name="M:Primrose.Log.AddLogLevel(System.String,Primrose.LogLevel)">
            <summary>Adds the logging levels for a log channel. If the channel does not yet exist, create it</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <param name="logLevel">The logging levels that will be printed into the log channel</param>
        </member>
        <member name="M:Primrose.Log.RemoveLogLevel(System.String,Primrose.LogLevel)">
            <summary>Removes the logging levels for a log channel. If the channel does not yet exist, create it</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <param name="logLevel">The logging levels that will be printed into the log channel</param>
        </member>
        <member name="M:Primrose.Log.GetOrCreateDefault(System.String)">
            <summary>Gets or creates a logging handle</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Log.Close(System.String)">
            <summary>Closes a logging handle</summary>
            <param name="channel">The name used to identify the logging channel</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Log.Debug(System.String,System.String)">
            <summary>Writes a formatted message into a log channel at the DEBUG level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:Primrose.Log.Debug``1(System.String,System.String,``0)">
            <summary>Writes a formatted message into a log channel at the DEBUG level</summary>
            <typeparam name="T">The type of the message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="arg">The message argument</param>
        </member>
        <member name="M:Primrose.Log.Debug``2(System.String,System.String,``0,``1)">
            <summary>Writes a formatted message into a log channel at the DEBUG level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
        </member>
        <member name="M:Primrose.Log.Debug``3(System.String,System.String,``0,``1,``2)">
            <summary>Writes a formatted message into a log channel at the DEBUG level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <typeparam name="T3">The type of the third message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
            <param name="a3">The third message argument</param>
        </member>
        <member name="M:Primrose.Log.Debug(System.String,System.String,System.Object[])">
            <summary>Writes a formatted message into a log channel at the DEBUG level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="args">The parameterized message arguments</param>
        </member>
        <member name="M:Primrose.Log.Info(System.String,System.String)">
            <summary>Writes a formatted message into a log channel at the INFO level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:Primrose.Log.Info``1(System.String,System.String,``0)">
            <summary>Writes a formatted message into a log channel at the INFO level</summary>
            <typeparam name="T">The type of the message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="arg">The message argument</param>
        </member>
        <member name="M:Primrose.Log.Info``2(System.String,System.String,``0,``1)">
            <summary>Writes a formatted message into a log channel at the INFO level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
        </member>
        <member name="M:Primrose.Log.Info``3(System.String,System.String,``0,``1,``2)">
            <summary>Writes a formatted message into a log channel at the INFO level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <typeparam name="T3">The type of the third message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
            <param name="a3">The third message argument</param>
        </member>
        <member name="M:Primrose.Log.Info(System.String,System.String,System.Object[])">
            <summary>Writes a formatted message into a log channel at the INFO level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="args">The parameterized message arguments</param>
        </member>
        <member name="M:Primrose.Log.Trace(System.String,System.String)">
            <summary>Writes a formatted message into a log channel at the TRACE level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:Primrose.Log.Trace``1(System.String,System.String,``0)">
            <summary>Writes a formatted message into a log channel at the TRACE level</summary>
            <typeparam name="T">The type of the message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="arg">The message argument</param>
        </member>
        <member name="M:Primrose.Log.Trace``2(System.String,System.String,``0,``1)">
            <summary>Writes a formatted message into a log channel at the TRACE level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
        </member>
        <member name="M:Primrose.Log.Trace``3(System.String,System.String,``0,``1,``2)">
            <summary>Writes a formatted message into a log channel at the TRACE level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <typeparam name="T3">The type of the third message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
            <param name="a3">The third message argument</param>
        </member>
        <member name="M:Primrose.Log.Trace(System.String,System.String,System.Object[])">
            <summary>Writes a formatted message into a log channel at the TRACE level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="args">The parameterized message arguments</param>
        </member>
        <member name="M:Primrose.Log.Warn(System.String,System.String)">
            <summary>Writes a formatted message into a log channel at the WARNING level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:Primrose.Log.Warn``1(System.String,System.String,``0)">
            <summary>Writes a formatted message into a log channel at the WARNING level</summary>
            <typeparam name="T">The type of the message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="arg">The message argument</param>
        </member>
        <member name="M:Primrose.Log.Warn``2(System.String,System.String,``0,``1)">
            <summary>Writes a formatted message into a log channel at the WARNING level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
        </member>
        <member name="M:Primrose.Log.Warn``3(System.String,System.String,``0,``1,``2)">
            <summary>Writes a formatted message into a log channel at the WARNING level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <typeparam name="T3">The type of the third message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
            <param name="a3">The third message argument</param>
        </member>
        <member name="M:Primrose.Log.Warn(System.String,System.String,System.Object[])">
            <summary>Writes a formatted message into a log channel at the WARNING level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="args">The parameterized message arguments</param>
        </member>
        <member name="M:Primrose.Log.Error(System.String,System.String)">
            <summary>Writes a formatted message into a log channel at the ERROR level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:Primrose.Log.Error``1(System.String,System.String,``0)">
            <summary>Writes a formatted message into a log channel at the ERROR level</summary>
            <typeparam name="T">The type of the message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="arg">The message argument</param>
        </member>
        <member name="M:Primrose.Log.Error``2(System.String,System.String,``0,``1)">
            <summary>Writes a formatted message into a log channel at the ERROR level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
        </member>
        <member name="M:Primrose.Log.Error``3(System.String,System.String,``0,``1,``2)">
            <summary>Writes a formatted message into a log channel at the ERROR level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <typeparam name="T3">The type of the third message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
            <param name="a3">The third message argument</param>
        </member>
        <member name="M:Primrose.Log.Error(System.String,System.String,System.Object[])">
            <summary>Writes a formatted message into a log channel at the ERROR level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="args">The parameterized message arguments</param>
        </member>
        <member name="M:Primrose.Log.Error(System.String,System.Exception)">
            <summary>Writes a formatted message into a log channel at the ERROR level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:Primrose.Log.Fatal(System.String,System.String)">
            <summary>Writes a formatted message into a log channel at the FATAL level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:Primrose.Log.Fatal``1(System.String,System.String,``0)">
            <summary>Writes a formatted message into a log channel at the FATAL level</summary>
            <typeparam name="T">The type of the message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="arg">The message argument</param>
        </member>
        <member name="M:Primrose.Log.Fatal``2(System.String,System.String,``0,``1)">
            <summary>Writes a formatted message into a log channel at the FATAL level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
        </member>
        <member name="M:Primrose.Log.Fatal``3(System.String,System.String,``0,``1,``2)">
            <summary>Writes a formatted message into a log channel at the FATAL level</summary>
            <typeparam name="T1">The type of the first message argument</typeparam>
            <typeparam name="T2">The type of the second message argument</typeparam>
            <typeparam name="T3">The type of the third message argument</typeparam>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="a1">The first message argument</param>
            <param name="a2">The second message argument</param>
            <param name="a3">The third message argument</param>
        </member>
        <member name="M:Primrose.Log.Fatal(System.String,System.String,System.Object[])">
            <summary>Writes a formatted message into a log channel at the FATAL level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="format">The log message format</param>
            <param name="args">The parameterized message arguments</param>
        </member>
        <member name="M:Primrose.Log.Fatal(System.String,System.Exception)">
            <summary>Writes a formatted message into a log channel at the FATAL level</summary>
            <param name="channel">The log channel to write to</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:Primrose.Log.RegisterCallback(System.String,Primrose.MessageDelegate,Primrose.LogLevel)">
            <summary>Registers a callback function to a log channel</summary>
            <param name="channel">The log channel to handle the callback</param>
            <param name="callback">The callback function to register</param>
            <param name="level">The logging levels were the callback will be triggered</param>
        </member>
        <member name="M:Primrose.Log.RemoveCallback(System.String,Primrose.MessageDelegate)">
            <summary>Removes a callback function from a log channel registry list</summary>
            <param name="channel">The log channel to handle the callback</param>
            <param name="callback">The callback function to register</param>
        </member>
        <member name="M:Primrose.Log.RemoveCallbacks(System.String)">
            <summary>Removes all callback functions from a log channel registry list</summary>
            <param name="channel">The log channel to handle the callback</param>
        </member>
        <member name="M:Primrose.Log.SetTimeFormat(System.String,System.String)">
            <summary>Sets the time format for a log channel</summary>
            <param name="channel">The log channel to handle the callback</param>
            <param name="format">The new time format to use</param>
        </member>
        <member name="T:Primrose.LogLevel">
            <summary>Defines the level of a log entry</summary>
        </member>
        <member name="F:Primrose.LogLevel.NONE">
            <summary>Indicates no log categories</summary>
        </member>
        <member name="F:Primrose.LogLevel.DEBUG">
            <summary>Indicates that the log item is used for debugging</summary>
        </member>
        <member name="F:Primrose.LogLevel.INFO">
            <summary>Indicates that the log item is used for general information</summary>
        </member>
        <member name="F:Primrose.LogLevel.TRACE">
            <summary>Indicates that the log item is used to trace a function or object</summary>
        </member>
        <member name="F:Primrose.LogLevel.WARN">
            <summary>Indicates that the log item is used as a warning</summary>
        </member>
        <member name="F:Primrose.LogLevel.ERROR">
            <summary>Indicates that the log item describes an error</summary>
        </member>
        <member name="F:Primrose.LogLevel.FATAL">
            <summary>Indicates that the log item describes a fatal error</summary>
        </member>
        <member name="F:Primrose.LogLevel.ALL">
            <summary>Indicates all log categories</summary>
        </member>
        <member name="T:Primrose.Primitives.Cache`4">
            <summary>
            Provides a basic cache functionality in a dictionary-like lookup.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="Token">The token type. The token is invalidated when the compared tokens are not equal</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <typeparam name="TParam">A parameter type used to generate updated values when the cached value is invalidated</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.#ctor">
            <summary>Creates a cache</summary>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.#ctor(System.Int32)">
            <summary>Creates a cache with an initial capacity</summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Primrose.Primitives.Cache`4.Count">
            <summary>Retrieves the number of elements in the cache</summary>
        </member>
        <member name="P:Primrose.Primitives.Cache`4.PoolCount">
            <summary>Retrieves the number of elements in the pool</summary>
        </member>
        <member name="P:Primrose.Primitives.Cache`4.PoolUncollectedCount">
            <summary>Retrieves the number of elements outside the pool. Ideally this should be equal to Count, otherwise garbage leak is suspected</summary>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.Define(`0,`1)">
            <summary>
            Defines a cache key if the key does not exist, otherwise flushes the key.
            </summary>
            <param name="key">The key containing the cached token and value</param>
            <param name="token">The new token to be compared with the cached token</param>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.Get(`0,`1,System.Func{`3,`2},`3,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Retrieves the value based on the cached key.
            </summary>
            <param name="key">The key containing the cached token and value</param>
            <param name="token">The new token to be compared with the cached token</param>
            <param name="func">The function used to generate the updated value</param>
            <param name="p">The parameter value used to generate the updated value</param>
            <param name="cmp">The token comparer</param>
            <returns>If the tokens match, return the cached value, otherwise update this value with func(p) and returns the new value</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Attempted to get an non-existent key from a cache.</exception>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.GetOrDefine(`0,`1,System.Func{`3,`2},`3,System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Defines a cache key if the key does not exist, then retrieves the value.
            </summary>
            <param name="key">The key containing the cached token and value</param>
            <param name="token">The new token to be compared with the cached token</param>
            <param name="func">The function used to generate the updated value</param>
            <param name="p">The parameter value used to generate the updated value</param>
            <param name="cmp">The token comparer</param>
            <returns>If the tokens match, return the cached value, otherwise update this value with func(p) and returns the new value</returns>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.Clear(System.Func{`1,System.Boolean})">
            <summary>Clears the cache of entries depending on a conditional function.</summary>
            <param name="func">The function that determines whether the entry should be cleared. Use null to clear the entire cache.</param>
            <returns>The number of items cleared</returns>
        </member>
        <member name="M:Primrose.Primitives.Cache`4.ClearAndPoolInBackgound(System.Func{`1,System.Boolean})">
            <summary>Clears the cache of entries depending on a conditional function.</summary>
            <param name="func">The function that determines whether the entry should be cleared. Use null to clear the entire cache.</param>
            <returns>The number of items cleared</returns>
        </member>
        <member name="T:Primrose.Primitives.Cache.Enum`1">
            <summary>Helper class to support caching of widely used functions for the Enum class</summary>
            <typeparam name="TEnum">The underlying enum class</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Cache.Enum`1.GetValues">
            <summary>
            Retrieves the array of the values of the constants in enumeration <typeparamref name="TEnum"/>.
            </summary>
            <returns>An array of the values of the constants in <typeparamref name="TEnum"/>.
            The elements of the array are sorted by the binary values of the enumeration constants.</returns>
        </member>
        <member name="M:Primrose.Primitives.Cache.Enum`1.GetNames">
            <summary>
            Retrieves the array of the values of the constants in enumeration <typeparamref name="TEnum"/>.
            </summary>
            <returns>An array of the values of the constants in <typeparamref name="TEnum"/>.
            The elements of the array are in the same order as in case of the result of the <see cref="M:Primrose.Primitives.Cache.Enum`1.GetValues">GetValues</see> method.</returns>
        </member>
        <member name="M:Primrose.Primitives.Cache.Enum`1.GetName(`0)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified <paramref name="value"/>.
            </summary>
            <param name="value">The <see langword="enum"/> value whose name is required.</param>
            <returns>A string containing the name of the enumerated <paramref name="value"/>, or <see langword="null"/> if no such constant is found.</returns>
        </member>
        <member name="M:Primrose.Primitives.Cache.Enum`1.Parse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Cache.Enum`1.TryParse(System.String,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Cache.Enum`1.Clear">
            <summary>Clears the cache for the class</summary>
        </member>
        <member name="T:Primrose.Primitives.Cache.ToStringCache`1">
            <summary>Helper class to cache ToString invocations of a generic type</summary>
        </member>
        <member name="F:Primrose.Primitives.Cache.ToStringCache`1.MaxEntries">
            <summary>The maximum number of entries stored in the cache before automatically generating Clear()</summary>
        </member>
        <member name="M:Primrose.Primitives.Cache.ToStringCache`1.Get(`0)">
            <summary>
            Retrieves the string associated with the value.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Cache.ToStringCache`1.Clear">
            <summary>Clears the cache for the class</summary>
        </member>
        <member name="T:Primrose.Primitives.Cache.WeakReference`1">
            <summary>
            Holds a typed object in a weak reference, allowing garbage collection
            </summary>
            <typeparam name="T">The type of the referenced object</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Cache.WeakReference`1.#ctor(`0)">
            <summary>Holds a typed object in a weak reference, allowing garbage collection</summary>
            <param name="target">The object to hold</param>
        </member>
        <member name="M:Primrose.Primitives.Cache.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>Holds a typed object in a weak reference, allowing garbage collection</summary>
            <param name="target">The object to hold</param>
            <param name="trackResurrection"></param>
        </member>
        <member name="P:Primrose.Primitives.Cache.WeakReference`1.Target">
            <summary>Gets the target object referenced by the current WeakReference&lt;T&gt; object.</summary>
        </member>
        <member name="M:Primrose.Primitives.Cache.WeakReference`1.TryGetTarget(`0@)">
            <summary>Tries to retrieve the target object that is referenced by the current WeakReference&lt;T&gt; object.</summary>
        </member>
        <member name="T:Primrose.Primitives.Collections.CircularQueue`1">
            <summary>
            Provides a FIFO queue based on circular linkage
            </summary>
            <typeparam name="T">The item type stored in the queue</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Collections.CircularQueue`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a queue.
            </summary>
            <param name="size">The size of the queue</param>
            <param name="errifexceed">Whether an exception is thrown if the queue is full</param>
        </member>
        <member name="P:Primrose.Primitives.Collections.CircularQueue`1.Count">
            <summary>Retrieves the number of elements in the queue</summary>
        </member>
        <member name="P:Primrose.Primitives.Collections.CircularQueue`1.ErrorIfExceedCapacity">
            <summary>Returns whether the queue throws an exception if its capacity is exceeded</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.CircularQueue`1.Enqueue(`0)">
            <summary>Enqueues an item from the queue</summary>
            <param name="value">The item to be enqueued</param>
            <exception cref="T:System.InvalidOperationException">Attempted to enqueue an item into the queue that has reached capacity limit.</exception>
        </member>
        <member name="M:Primrose.Primitives.Collections.CircularQueue`1.Dequeue">
            <summary>Dequeues an item from the queue</summary>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Collections.ResizableArray`1">
            <summary>Represents an resizable array</summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.#ctor(System.Int32)">
            <summary>Represents an resizable array</summary>
            <param name="initialCount">The initial size of the array</param>
        </member>
        <member name="P:Primrose.Primitives.Collections.ResizableArray`1.InternalArray">
            <summary>Retrieves the underlying array</summary>
        </member>
        <member name="P:Primrose.Primitives.Collections.ResizableArray`1.Count">
            <summary>The number of valid elements in the array</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.Add(`0)">
            <summary>Adds an element to the array</summary>
            <param name="element">The element to be added</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.AddRange(`0[])">
            <summary>Adds a range of elements to the array</summary>
            <param name="elements">The range of elements to be added</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.AddRange(Primrose.Primitives.Collections.ResizableArray{`0})">
            <summary>Adds a range of elements to the array</summary>
            <param name="elements">The range of elements to be added</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>Adds a range of elements to the array</summary>
            <param name="elements">The range of elements to be added</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.Resize(System.Int32)">
            <summary>Resizes the array to contain the specified number of elements. This resizing will double the size of the current array to accommodate this count.</summary>
            <param name="count">The desired size of the array</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.ResizeExact(System.Int32)">
            <summary>Resizes the array to contain the specified number of elements. This resizing is exact.</summary>
            <param name="count">The desired size of the array</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.Clear(System.Boolean)">
            <summary>Resets the count to 0, and optionally clears elements to default</summary>
            <param name="clearElements">Determines if the members of the array should be zeroed</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ResizableArray`1.ClearElements(System.Int32,System.Int32)">
            <summary>Clears elements within the array to default values</summary>
        </member>
        <member name="P:Primrose.Primitives.Collections.ResizableArray`1.Item(System.Int32)">
            <summary>Retrieves the element at an index of the array</summary>
            <param name="id">The index of the element</param>
        </member>
        <member name="T:Primrose.Primitives.Collections.ThreadSafeEnumerable">
            <summary>Represents a thread-safe wrapper over an enumerable collection</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerable.#ctor(System.Collections.IEnumerable,System.Object)">
            <summary>Creates a thread-safe wrapper over an enumerable collection</summary>
            <param name="inner">The (thread-unsafe) enumerator</param>
            <param name="lock">The locking object</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerable.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>A System.Collections.Generic.IEnumerator`1 that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Primrose.Primitives.Collections.ThreadSafeEnumerable`1">
            <summary>Represents a thread-safe wrapper over an enumerable collection</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Object)">
            <summary>Creates a thread-safe wrapper over an enumerable collection</summary>
            <param name="inner">The (thread-unsafe) enumerator</param>
            <param name="lock">The locking object</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerable`1.#ctor(System.Func{System.Collections.Generic.IEnumerator{`0}},System.Object)">
            <summary>Creates a thread-safe wrapper over an enumerable collection</summary>
            <param name="func">A function that creates and returns the (thread-unsafe) enumerator</param>
            <param name="lock">The locking object</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerable`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>A System.Collections.Generic.IEnumerator`1 that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Primrose.Primitives.Collections.ThreadSafeEnumerator">
            <summary>Represents a thread-safe wrapper over an enumerator</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator.#ctor(System.Func{System.Collections.IEnumerator},System.Object)">
            <summary>Creates a thread-safe wrapper over an enumerator</summary>
            <param name="inner">The (thread-unsafe) enumerator</param>
            <param name="lock">The locking object</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator.Dispose">
            <summary>Disposes the wrapper and releases the lock</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection</summary>
        </member>
        <member name="P:Primrose.Primitives.Collections.ThreadSafeEnumerator.Current">
            <summary>Gets the current element in the collection</summary>
        </member>
        <member name="T:Primrose.Primitives.Collections.ThreadSafeEnumerator`1">
            <summary>Represents a thread-safe wrapper over an enumerator</summary>
            <typeparam name="T">The enumerated type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator`1.#ctor(System.Func{System.Collections.Generic.IEnumerator{`0}},System.Object)">
            <summary>Creates a thread-safe wrapper over an enumerator</summary>
            <param name="inner">The (thread-unsafe) enumerator</param>
            <param name="lock">The locking object</param>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator`1.Dispose">
            <summary>Disposes the wrapper and releases the lock</summary>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator`1.MoveNext">
            <summary>Advances the enumerator to the next element of the collection</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection</returns>
        </member>
        <member name="M:Primrose.Primitives.Collections.ThreadSafeEnumerator`1.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection</summary>
        </member>
        <member name="P:Primrose.Primitives.Collections.ThreadSafeEnumerator`1.Current">
            <summary>Gets the current element in the collection</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.Factory`2">
            <summary>
            Allows creation of objects and stores them automatically. Limited to objects with parameterless constructors; for others, use Registry
            </summary>
            <typeparam name="K">The key type to be stored</typeparam>
            <typeparam name="T">The object type to be stored</typeparam>
        </member>
        <member name="T:Primrose.Primitives.Factories.Factory`2.InitDelegate">
            <summary>Represents a delegate for object modification operations</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Factory`2.Create(`0)">
            <summary>
            Creates a new object and stores its reference in its internal registry
            </summary>
            <param name="id">The identifier for the object</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Factory`2.Create(`0,Primrose.Primitives.Factories.Factory{`0,`1}.InitDelegate)">
            <summary>
            Creates a new object and stores its reference in its internal registry
            </summary>
            <param name="id">The identifier for the object</param>
            <param name="initFn">The initializer function</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Factory`2.Add(`1)">
            <summary>
            Adds an existing object and stores its reference in its internal registry
            </summary>
            <param name="item">The object to be stored</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Factory`2.Put(`1)">
            <summary>
            Puts an existing object and stores its reference in its internal registry
            </summary>
            <param name="item">The object to be stored</param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Factories.StructFactory`2">
            <summary>
            Allows creation of objects and stores them automatically. Limited to objects with parameterless constructors; for others, use Registry
            </summary>
            <typeparam name="K">The key type to be stored</typeparam>
            <typeparam name="T">The object type to be stored</typeparam>
        </member>
        <member name="T:Primrose.Primitives.Factories.StructFactory`2.InitDelegate">
            <summary>Represents a delegate for object modification operations</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.StructFactory`2.Create(`0)">
            <summary>
            Creates a new object and stores its reference in its internal registry
            </summary>
            <param name="id">The identifier for the object</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.StructFactory`2.Create(`0,Primrose.Primitives.Factories.StructFactory{`0,`1}.InitDelegate)">
            <summary>
            Creates a new object and stores its reference in its internal registry
            </summary>
            <param name="id">The identifier for the object</param>
            <param name="initFn">The initializer function</param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Factories.IFactory`2">
            <summary>
            Allows creation of objects and stores them automatically. Limited to objects with parameterless constructors; for others, use Registry
            </summary>
            <typeparam name="K">The key type to be stored</typeparam>
            <typeparam name="T">The object type to be stored</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.IFactory`2.Create(`0)">
            <summary>
            Creates a new object and stores its reference in its internal registry
            </summary>
            <param name="id">The identifier for the object</param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Factories.IRegistry`2">
            <summary>
            Maintains a typed registry of objects.
            </summary>
            <typeparam name="K">The type of the key</typeparam>
            <typeparam name="T">The type of the registered object</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.IRegistry`2.Get(`0)">
            <summary>Retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key. If the registry does not contain this key, returns Default</returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.IRegistry`2.GetUnderlyingDictionary">
            <summary>Retrieves the underlying dictionary</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.IRegistry`2.Add(`0,`1)">
            <summary>Adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.IRegistry`2.Put(`0,`1)">
            <summary>Updates or adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.IRegistry`2.Remove(`0)">
            <summary>Removes an object from the registry</summary>
            <param name="key">The identifier key to remove</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.IRegistry`2.Clear">
            <summary>Purges all data from the registry</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.AFactoryObject`1">
            <summary>
            Defines a Factory object>
            </summary>
            <typeparam name="K">The type of the associated key</typeparam>
        </member>
        <member name="P:Primrose.Primitives.Factories.AFactoryObject`1.ID">
            <summary>The unique identifier of the object</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.AFactoryObject`1.#ctor">
            <summary>Creates an instance of the object</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.ObjectPool`1">
            <summary>
            Provides a basic object pool for pooling objects for further use  
            </summary>
            <typeparam name="T">The item type to be pooled</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`1.#ctor(System.Boolean,System.Func{`0},System.Action{`0})">
            <summary>
            Creates an object pool
            </summary>
            <param name="useLocalPool">Defines whether objects shall be retrieved from the global pool or a local pool tied to this pool object</param>
            <param name="createFn">The function for creating new instances</param>
            <param name="resetFn">The function for reseting instances that are returned to the pool</param>
            <exception cref="T:System.ArgumentNullException">createFn cannot be null</exception>
        </member>
        <member name="P:Primrose.Primitives.Factories.ObjectPool`1.Count">
            <summary>Retrieves the number of elements in the pool</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.ObjectPool`1.UncollectedCount">
            <summary>Retrieves the number of generated elements in the pool that were not yet collected</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.ObjectPool`1.UseLocalPool">
            <summary>Defines whether objects shall be retrieved from the global pool or a local pool tied to this pool object</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`1.GetNew">
            <summary>Returns an instance of <typeparamref name="T"/> from the pool, or creates a new instance if the pool is empty</summary>
            <returns>An instance of <typeparamref name="T"/> from the pool, or created from the creator function if the pool is empty</returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`1.Return(`0)">
            <summary>Returns an instance of <typeparamref name="T"/> to the pool.</summary>
            <param name="item">The object to be returned to the pool</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`1.Clear">
            <summary>Removes all instances from the pool</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.ObjectPool`1.HasStaticPool">
            <summary>Returns whether a static instance exists for this object pool</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`1.CreateStaticPool(System.Func{`0},System.Action{`0},System.Boolean)">
            <summary>
            Creates a static version of the object pool for global use
            </summary>
            <param name="createFn">The function for creating new instances</param>
            <param name="resetFn">The function for reseting instances that are returned to the pool</param>
            <param name="replaceExisting">Denotes whether this method should replace the existing static pool</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The background object pool has already been created.</exception>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`1.GetStaticPool">
            <summary>
            Retrieves the static version of the pool if created
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The background object pool has not been created.</exception>
        </member>
        <member name="T:Primrose.Primitives.Factories.IPool">
            <summary>
            Provides a basic object pool for pooling objects for further use  
            </summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.IPool.Count">
            <summary>Retrieves the number of elements in the pool</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.IPool.UncollectedCount">
            <summary>Retrieves the number of generated elements in the pool that were not yet collected</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.ObjectPool`2">
            <summary>
            Provides a basic object pool for pooling objects for further use  
            </summary>
            <typeparam name="T">The item type to be pooled</typeparam>
            <typeparam name="TParam">The type of the parameter for creation of new objects</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`2.CreateStaticPool(System.Func{`1,`0},System.Action{`0})">
            <summary>
            Creates a static version of the object pool for global use
            </summary>
            <param name="createFn">The function for creating new instances</param>
            <param name="resetFn">The function for reseting instances that are returned to the pool</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The background object pool has already been created.</exception>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`2.GetStaticPool">
            <summary>
            Retrieves the static version of the pool if created
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The background object pool has not been created.</exception>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`2.#ctor(System.Func{`1,`0},System.Action{`0})">
            <summary>
            Creates an object pool
            </summary>
            <param name="createFn">The function for creating new instances</param>
            <param name="resetFn">The function for reseting instances that are returned to the pool</param>
            <exception cref="T:System.ArgumentNullException">createFn cannot be null</exception>
        </member>
        <member name="P:Primrose.Primitives.Factories.ObjectPool`2.Count">
            <summary>Retrieves the number of elements in the pool</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.ObjectPool`2.UncollectedCount">
            <summary>Retrieves the number of generated elements in the pool that were not yet collected</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`2.GetNew(`1)">
            <summary>Returns an instance of <typeparamref name="T"/> from the pool, or creates a new instance if the pool is empty</summary>
            <returns>An instance of <typeparamref name="T"/> from the pool, or created from the creator function if the pool is empty</returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`2.Return(`0)">
            <summary>Returns an instance of <typeparamref name="T"/> to the pool.</summary>
            <param name="item">The object to be returnedto the pool</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.ObjectPool`2.Clear">
            <summary>Removes all instances from the pool</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.Registry`2">
            <summary>
            Maintains a typed registry of objects.
            </summary>
            <typeparam name="K">The type of the key</typeparam>
            <typeparam name="T">The type of the registered object</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor">
            <summary>Creates an object registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor(System.Int32)">
            <summary>Creates an object registry with an initial capacity</summary>
            <param name="capacity">The initial capacity of the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor(Primrose.Primitives.Factories.IRegistry{`0,`1})">
            <summary>Creates an object registry that contains elements copied from another registry</summary>
            <param name="other">The other registry whose elements are copied to this registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Creates an object registry with an equality comparer</summary>
            <param name="comparer">The equality comparer for the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Creates an object registry with an initial capacity</summary>
            <param name="capacity">The initial capacity of the registry</param>
            <param name="comparer">The equality comparer for the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor(Primrose.Primitives.Factories.IRegistry{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Creates an object registry that contains elements copied from another registry</summary>
            <param name="other">The other registry whose elements are copied to this registry</param>
            <param name="comparer">The equality comparer for the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>Creates an object registry that uses the given backing dictionary</summary>
            <param name="dictionary">The backing dictionary for this registry</param>
        </member>
        <member name="F:Primrose.Primitives.Factories.Registry`2.list">
            <summary>The container data source</summary>
        </member>
        <member name="F:Primrose.Primitives.Factories.Registry`2.Default">
            <summary>The default value returned</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetUnderlyingConcreteDictionary">
            <summary>Retrieves the underlying dictionary in its concrete form. Useful if avoiding allocations due to IDictionary cast is needed. Use it only when you know what you are doing</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetUnderlyingDictionary">
            <summary>Retrieves the underlying dictionary</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Contains(`0)">
            <summary>Determines whether the registry contains a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>True if the registry contains this key, False if otherwise</returns>
        </member>
        <member name="P:Primrose.Primitives.Factories.Registry`2.Item(`0)">
            <summary>Retrieves the value associated with a key index</summary>
            <param name="id">The identifier key to check</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Get(`0)">
            <summary>Retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key. If the registry does not contain this key or the key is null, returns Default</returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetD(`0,`1)">
            <summary>Retrieves the value associated with a key or a default value if the key is not present</summary>
            <param name="key">The identifier key to check</param>
            <param name="defaultValue">The default value</param>
            <returns>The value associated with the key. If the registry does not contain this key or the key is null, returns defaultValue</returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetX(`0)">
            <summary>Strictly retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The registry does not contain this key.</exception>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetKeys">
            <summary>Retrives an array of all the keys in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.EnumerateKeys">
            <summary>Enumerates through the keys in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetValues">
            <summary>Retrives an array of all the values in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.EnumerateValues">
            <summary>Enumerates through the values in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Add(`0,`1)">
            <summary>Adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Put(`0,`1)">
            <summary>Updates or adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Remove(`0)">
            <summary>Removes an object from the registry</summary>
            <param name="key">The identifier key to remove</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Clear">
            <summary>Purges all data from the registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetEnumerator">
            <summary>Retrieves the enumerator for the registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.GetEnumeratorDirect">
            <summary>Retrieves the enumerator for the registry. This thread-unsafe way allows for the enumerator to be retrieved without allocation</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Retrieves the enumerator for the registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Updates or adds an object into the registry</summary>
            <param name="item">The key-value pair to be added</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Determines whether the registry contains the key and value pair</summary>
            <param name="item">The key-value pair to be compared to</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>Copies an array of objects into the registry</summary>
            <param name="array">The array of objects to be copied</param>
            <param name="arrayIndex">The index to copy to</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.Registry`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Removes an object from the registry</summary>
            <param name="item">The key-value pair to be removed</param>
        </member>
        <member name="P:Primrose.Primitives.Factories.Registry`2.Count">
            <summary>The number of elements in this registry</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.Registry`2.IsReadOnly">
            <summary>Determines if this collection is read-only</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.Registry`1">
            <summary>
            Maintains a typed registry of objects.
            </summary>
            <typeparam name="T">The type of the registered object</typeparam>
        </member>
        <member name="T:Primrose.Primitives.Factories.SortedRegistry`2">
            <summary>
            Maintains a typed registry of objects.
            </summary>
            <typeparam name="K">The type of the key</typeparam>
            <typeparam name="T">The type of the registered object</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor">
            <summary>Creates an object registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>Creates an object registry with a comparer</summary>
            <param name="comparer">The sorting comparer for the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor(Primrose.Primitives.Factories.IRegistry{`0,`1})">
            <summary>Creates an object registry that contains elements copied from another registry</summary>
            <param name="other">The other registry whose elements are copied to this registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Creates an object registry that uses the given backing dictionary</summary>
            <param name="dictionary">The other dictionary whose elements are copied to this registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>Creates an object registry that uses the given backing dictionary</summary>
            <param name="dictionary">The other dictionary whose elements are copied to this registry</param>
            <param name="comparer">The sorting comparer for the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor(Primrose.Primitives.Factories.IRegistry{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>Creates an object registry that contains elements copied from another registry</summary>
            <param name="other">The other registry whose elements are copied to this registry</param>
            <param name="comparer">The sorting comparer for the registry</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
            <summary>Creates an object registry that uses the given backing dictionary</summary>
            <param name="dictionary">The backing dictionary for this registry</param>
        </member>
        <member name="F:Primrose.Primitives.Factories.SortedRegistry`2.list">
            <summary>The container data source</summary>
        </member>
        <member name="F:Primrose.Primitives.Factories.SortedRegistry`2.Default">
            <summary>The default value returned</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.GetUnderlyingConcreteDictionary">
            <summary>Retrieves the underlying dictionary in its concrete form. Useful if avoiding allocations due to IDictionary cast is needed. Use it only when you know what you are doing</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.GetUnderlyingDictionary">
            <summary>Retrieves the underlying dictionary</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.Contains(`0)">
            <summary>Determines whether the registry contains a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>True if the registry contains this key, False if otherwise</returns>
        </member>
        <member name="P:Primrose.Primitives.Factories.SortedRegistry`2.Item(`0)">
            <summary>Retrieves the value associated with a key index</summary>
            <param name="id">The identifier key to check</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.Get(`0)">
            <summary>Retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key. If the registry does not contain this key or the key is null, returns Default</returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.GetX(`0)">
            <summary>Strictly retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The registry does not contain this key.</exception>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.GetKeys">
            <summary>Retrives an array of all the keys in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.EnumerateKeys">
            <summary>Enumerates through the keys in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.GetValues">
            <summary>Retrives an array of all the values in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.EnumerateValues">
            <summary>Enumerates through the values in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.Add(`0,`1)">
            <summary>Adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.Put(`0,`1)">
            <summary>Updates or adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.Remove(`0)">
            <summary>Removes an object from the registry</summary>
            <param name="key">The identifier key to remove</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.Clear">
            <summary>Purges all data from the registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.GetEnumerator">
            <summary>Retrieves the enumerator for the registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Factories.SortedRegistry`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Retrieves the enumerator for the registry</summary>
        </member>
        <member name="P:Primrose.Primitives.Factories.SortedRegistry`2.Count">
            <summary>The number of elements in this registry</summary>
        </member>
        <member name="T:Primrose.Primitives.Factories.WeakReferenceRegistry`2">
            <summary>
            Maintains a typed registry of objects.
            </summary>
            <typeparam name="K">The type of the key</typeparam>
            <typeparam name="T">The type of the registered object</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Factories.WeakReferenceRegistry`2.Mark(`0,`1@)">
            <summary>Marks the object as active and holds it with a strong reference</summary>
            <param name="key">The identifier key</param>
            <param name="item">The object associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.WeakReferenceRegistry`2.Unmark(System.Boolean)">
            <summary>Unmarks all active objects. Call SetUnmarkedForCollection to allow collection of previously active objects</summary>
            <param name="allowCollection">If true, allows collection of objects immediately</param>
        </member>
        <member name="M:Primrose.Primitives.Factories.WeakReferenceRegistry`2.SetUnmarkedForCollection">
            <summary>Allows collection of previously active objects that are now unmarked</summary>
        </member>
        <member name="T:Primrose.Primitives.ThreadSafeDictionary`2">
            <summary>
            Provides a basic thread-safe paired dictionary for multithreaded updates  
            </summary>
            <typeparam name="T">The item type to be stored as keys in this dictionary</typeparam>
            <typeparam name="U">The item type to be stored as values in this dictionary</typeparam>
        </member>
        <member name="F:Primrose.Primitives.ThreadSafeDictionary`2.ExplicitUpdateOnly">
            <summary>
            Defines whether updates should be triggered explicitly. If true, call SetDirty() to update.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a thread-safe dictionary
            </summary>
            <param name="dict">The initial dictionary source</param>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeDictionary`2.Count">
            <summary>Retrieves the number of elements in the dictionary</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>Returns whether the key exists in the dictionary</summary>
            <param name="key">The key to check</param>
            <returns>True if the key exists, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.ContainsValue(`1)">
            <summary>Returns whether the value exists in the dictionary</summary>
            <param name="value">The value to check</param>
            <returns>True if the value exists, false otherwise</returns>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeDictionary`2.Item(`0)">
            <summary>Retrieves a value using a key</summary>
            <param name="key">The key to check</param>
            <returns>Returns the value associated with this key</returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.GetDictionary">
            <summary>Obtains last updated collection</summary>
            <returns></returns>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeDictionary`2.Keys">
            <summary>Obtains last updated keys</summary>
            <returns></returns>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeDictionary`2.Values">
            <summary>Obtains last updated values</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Get(`0)">
            <summary>Retrieves the value associated with this key</summary>
            <param name="key">The key to check</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.SetDirty">
            <summary>Explicity triggers the list for update</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Refresh">
            <summary>Forces a refresh</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>Adds an item to the collection</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Set(`0,`1)">
            <summary>Sets an item to the collection</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Put(`0,`1)">
            <summary>Adds or Sets an item to the collection</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Clear">
            <summary>Clears the collection</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Remove(`0)">
            <summary>Removes an item from the collection</summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeDictionary`2.Modify(`0,System.Func{`1,`1})">
            <summary>
            Performs a thread-safe modification on a value using an index
            </summary>
            <param name="key">The key to check</param>
            <param name="func">The modify function</param>
        </member>
        <member name="T:Primrose.Primitives.ThreadSafeList`1">
            <summary>
            Provides a basic thread-safe list interface for multithreaded updates  
            </summary>
            <typeparam name="T">The item type to be stored in this list</typeparam>
        </member>
        <member name="F:Primrose.Primitives.ThreadSafeList`1.ExplicitUpdateOnly">
            <summary>
            Defines whether updates should be triggered explicitly. If true, call SetDirty() to update.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a thread-safe list
            </summary>
            <param name="items">The initial list source</param>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeList`1.Count">
            <summary>
            The number of elements in the list
            </summary>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeList`1.IsReadOnly">
            <summary>
            Returns whether the list is read-only
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Contains(`0)">
            <summary>
            Returns whether the item exists in the dictionary
            </summary>
            <param name="item">The item to check</param>
            <returns>True if the item exists, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.IndexOf(`0)">
            <summary>
            Returns the index of an item in the dictionary
            </summary>
            <param name="item">The item to check</param>
            <returns>The zero-based index of the item, or -1 if the item is not found</returns>
        </member>
        <member name="P:Primrose.Primitives.ThreadSafeList`1.Item(System.Int32)">
            <summary>
            Retrieves a value using an index
            </summary>
            <param name="id">The index to check</param>
            <returns>Returns the value associated with this index</returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.GetList">
            <summary>
            Obtains last updated collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.SetDirty">
            <summary>
            Explicity triggers the list for update
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Get(System.Int32)">
            <summary>
            Gets an item to the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index in the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Add(`0)">
            <summary>
            Adds an item to the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.AddUnique(`0)">
            <summary>
            Adds an item to the collection only if this item is not already in the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Set(System.Int32,`0)">
            <summary>
            Sets an item to the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Remove(`0)">
            <summary>
            Removes the first instance of an item from the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the first instance of an item from the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.RemoveAllItem(`0)">
            <summary>
            Removes all instances of an item from the collection
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Modify(System.Int32,System.Func{`0,`0})">
            <summary>
            Performs a thread-safe modification on a value using an index
            </summary>
            <param name="index">The index to check</param>
            <param name="func">The modify function</param>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the list using a comparer
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the list to an array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ThreadSafeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.ArrayMismatchException">
            <summary>Represents an exception as a result of processing an array with an unexpected format</summary>
        </member>
        <member name="M:Primrose.Primitives.ArrayMismatchException.#ctor">
            <summary>
            Represents an exception in comparing two arrays of different lengths
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ArrayMismatchException.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents an exception in comparing two arrays of different lengths
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ArrayMismatchException.#ctor(System.Int32,System.Type)">
            <summary>
            Represents an exception when attempting to assign an array to a typed value
            </summary>
        </member>
        <member name="T:Primrose.Primitives.CapacityExceededException`1">
            <summary>Represents an exception as a result of pushing in a value into a collection beyond its capacity</summary>
        </member>
        <member name="M:Primrose.Primitives.CapacityExceededException`1.#ctor(System.Int32)">
            <summary>Represents an exception as a result of pushing in a value into a collection beyond its capacity</summary>
        </member>
        <member name="T:Primrose.Primitives.ExpectedEnumException`1">
            <summary>Represents an exception as a result of receiving a value that is not an enumerable</summary>
        </member>
        <member name="M:Primrose.Primitives.ExpectedEnumException`1.#ctor">
            <summary>Represents an exception as a result of receiving a value that is not an enumerable</summary>
        </member>
        <member name="T:Primrose.Primitives.Extensions.Array`1">
            <summary>Helper class for referencing empty arrays without allocation</summary>
            <typeparam name="T">The element type of the array</typeparam>
        </member>
        <member name="P:Primrose.Primitives.Extensions.Array`1.Empty">
            <summary>Retrieves a reference to the empty array</summary>
        </member>
        <member name="T:Primrose.Primitives.Extensions.ArrayExts">
            <summary>
            Provides extension methods for arrays
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ArrayExts.Random``1(``0[],System.Random)">
            <summary>Retrives a random object from an array of objects</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="array">The array</param>
            <param name="rand">The random object</param>
            <returns>A random object from the array. If the array has no members, return the default value of the member type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> and <paramref name="rand"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ArrayExts.Contains``1(``0[],``0)">
            <summary>Determines if an array contains a value</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="array">The array</param>
            <param name="value">The value to check</param>
            <returns>True if the array contains at least one member equal to value, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ArrayExts.ContainsSameElements``1(``0[],``0[])">
            <summary>Determines if two arrays contains the same elements, not necessarily in order</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="array">The array</param>
            <param name="other">The second array to compare</param>
            <returns>True if the two arrays contains the same elements, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ArrayExts.Convert``2(``0[],System.Func{``0,``1})">
            <summary>Performs an element-wise conversion of an array to an array of another type</summary>
            <typeparam name="T">The member type of the input array</typeparam>
            <typeparam name="U">The member type of the return array</typeparam>
            <param name="array">The input array</param>
            <param name="convertFn">The conversion function for each element</param>
            <returns>An array with each element converted from the corresponding element in the input array</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> and <paramref name="convertFn"/> cannot be null</exception>
        </member>
        <member name="T:Primrose.Primitives.Extensions.BitExts">
            <summary>
            Provides extension methods for bit manipulation functions
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.IsBitSet(System.Int32,System.Int32)">
            <summary>Determines if a value as a bit set at a given bit position</summary>
            <param name="value"></param>
            <param name="bit_position"></param>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.SetBit(System.Int32@,System.Int32,System.Boolean)">
            <summary>Sets or resets a given bit position</summary>
            <param name="value"></param>
            <param name="bit_position"></param>
            <param name="bit_value"></param>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.GetMostSignificantBit(System.UInt32)">
            <summary>Retrieves the most significant bit of a value</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.GetUniqueBits(System.UInt32)">
            <summary>Enumerates the bits of a value by position</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Extensions.BitExts.BitEnumerable">
            <summary>Represents an enumeration of bit positions</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.BitEnumerable.#ctor(System.UInt32)">
            <summary>Creates the enumerable</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.BitEnumerable.GetEnumerator">
            <summary>Gets the enumerator</summary>
        </member>
        <member name="T:Primrose.Primitives.Extensions.BitExts.BitEnumerator">
            <summary>Represents an enumerator of bit positions</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.BitEnumerator.#ctor(System.UInt32)">
            <summary>Creates the enumerator</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.BitExts.BitEnumerator.MoveNext">
            <summary>Retrieves the next bit position</summary>
        </member>
        <member name="P:Primrose.Primitives.Extensions.BitExts.BitEnumerator.Current">
            <summary>Retrieves the current bit position</summary>
        </member>
        <member name="T:Primrose.Primitives.Extensions.ComparableExts">
            <summary>
            Provides extension methods for generic comparable values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.ReplaceIfDefault``1(``0,``0)">
            <summary>
            Checks if a value equals the default, and provides a replacement value if so
            </summary>
            <param name="value">The input value</param>
            <param name="replacevalue">The replacement value</param>
            <returns>replacevalue if the input equals the default value of the type, the original input value otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.ReplaceIf``1(``0,``0,System.Predicate{``0})">
            <summary>
            Checks if a value satisfies a condition, and provides a replacement value if so
            </summary>
            <param name="value">The input value</param>
            <param name="replacevalue">The replacement value</param>
            <param name="condition">The condition function</param>
            <returns>replacevalue if the input satisfies the condition, the original input value otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.Clamp``1(``0,``0,``0)">
            <summary>
            Returns a value clamped between a minimum and a maximum
            </summary>
            <param name="value">The input value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>min if the value is less than min, max is the value is more than max, value otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.Max``1(``0,``0)">
            <summary>
            Returns the greater of two values
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
            <returns>The greater of the two values</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.Min``1(``0,``0)">
            <summary>
            Returns the lesser of two values
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
            <returns>The smaller of the two values</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the greater of two values, as determined by a comparer
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
            <param name="comparer">The comparer object used to compare the two values</param>
            <returns>The greater of the two values</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the lesser of two values, as determined by a comparer
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
            <param name="comparer">The comparer object used to compare the two values</param>
            <returns>The smaller of the two values</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.WithinRangeExclusive``1(``0,``0,``0)">
            <summary>
            Determines if a value is within the exclusive range of two values
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The exclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <returns>True if the value is within the exclusive bounds of the two values, False otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.WithinRangeInclusive``1(``0,``0,``0)">
            <summary>
            Determines if a value is within the inclusive range of two values
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The inclusive upper bound</param>
            <returns>True if the value is within the inclusive bounds of the two values, False otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.WithinRange``1(``0,``0,``0)">
            <summary>
            Determines if a value is within the range of two values
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The exclusive upper bound</param>
            <returns>True if the value is within the range of the two values, False otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ComparableExts.WithinRangeInclusive``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Determines if a value is between two values, as determined by a comparer
            </summary>
            <param name="value">The value to check</param>
            <param name="min">The inclusive lower bound</param>
            <param name="max">The inclusive upper bound</param>
            <param name="comparer">The comparer object used to compare the values</param>
            <returns>True if the value is within the bounds of the two values, False otherwise</returns>
        </member>
        <member name="T:Primrose.Primitives.Extensions.Dictionary">
            <summary>
            Provides extension methods for Dictionaries
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.Dictionary.Put``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds or updates a key-value pair in a dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <param name="k"></param>
            <param name="v"></param>
        </member>
        <member name="M:Primrose.Primitives.Extensions.Dictionary.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Retrieves a value from a dictionary, or a default(<typeparamref name="V"/>) if the key is not in the dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.Dictionary.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Retrieves a value from a dictionary, or adds a new instance of <typeparamref name="V"/> if the key is not in the dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.Dictionary.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Retrieves a value from a dictionary, or adds a new instance of <typeparamref name="V"/> if the key is not in the dictionary.
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="d"></param>
            <param name="k"></param>
            <param name="createFn">The function used to create the new instance of <typeparamref name="V"/></param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Extensions.ListExts">
            <summary>
            Provides extension methods for Lists
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.BinarySearchMany``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Performs a binary search 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="searchFor"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.BinarySearch``2(System.Collections.Generic.List{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Performs a binary search 
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list"></param>
            <param name="target"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.SelectRandom``1(System.Collections.Generic.List{``0},System.Random,``0@)">
            <summary>Retrives a random object from a list of objects</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="list">The array</param>
            <param name="rand">The random object</param>
            <param name="result">A random object from the array. If the array has no members, return the default value of the member type</param>
            <returns>True if a random object is picked. False if otherwise (e.g. the array is empty)</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> and <paramref name="rand"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.SelectRandom``1(System.Collections.Concurrent.ConcurrentBag{``0},System.Random,``0@)">
            <summary>Retrives a random object from a list of objects</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="list">The array</param>
            <param name="rand">The random object</param>
            <param name="result">A random object from the array. If the array has no members, return the default value of the member type</param>
            <returns>True if a random object is picked. False if otherwise (e.g. the array is empty)</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> and <paramref name="rand"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.RemoveAll``1(System.Collections.Generic.LinkedList{``0},System.Predicate{``0})">
            <summary>
            Removes items from a list based on a predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.Random``1(System.Collections.Generic.LinkedList{``0},System.Random)">
            <summary>Retrives a random object from a list of objects</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="list">The array</param>
            <param name="rand">The random object</param>
            <returns>A random object from the array. If the array has no members, return the default value of the member type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> and <paramref name="rand"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ListExts.Find``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>Retrives the first element from a list of objects, that matches a condition</summary>
            <typeparam name="T">The member type</typeparam>
            <param name="list">The array</param>
            <param name="condition">The matching condition</param>
            <returns>The first element that matches the condition, or the default value if none matches the condition</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> and <paramref name="condition"/> cannot be null</exception>
        </member>
        <member name="T:Primrose.Primitives.Extensions.NumericExts">
            <summary>
            Provides extension methods for float values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.NumericExts.Creep(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.NumericExts.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.NumericExts.Modulus(System.Single,System.Single,System.Single)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="value">The input value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.NumericExts.Modulus(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="value">The input value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="T:Primrose.Primitives.Extensions.ObjectExts">
            <summary>
            Provides extension methods for object values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.ObjectExts.ToBool(System.Object)">
            <summary>
            Checks if a value evaluates to True or False
            </summary>
            <param name="value">The object</param>
            <returns>A boolean value</returns>
        </member>
        <member name="T:Primrose.Primitives.Extensions.StringBuilderExts">
            <summary>Extension methods for the 'StringBuilder' standard .NET class, to allow garbage-free concatenation of formatted strings with a variable set of arguments.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.DateTime,System.String,System.Int32,System.Int32)">
            <summary>Convert a given datetime value to a string and concatenate onto the stringbuilder. Only certain codes are supported</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.UInt32,System.UInt32,System.Char,System.UInt32)">
            <summary>Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Any base value allowed.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.UInt32)">
            <summary>Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Assume no padding and base ten.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.UInt32,System.UInt32)">
            <summary>Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Assume base ten.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.UInt32,System.UInt32,System.Char)">
            <summary>Convert a given unsigned integer value to a string and concatenate onto the stringbuilder. Assume base ten.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Int32,System.UInt32,System.Char,System.UInt32)">
            <summary>Convert a given signed integer value to a string and concatenate onto the stringbuilder. Any base value allowed.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Int32)">
            <summary>Convert a given signed integer value to a string and concatenate onto the stringbuilder. Assume no padding and base ten.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Int32,System.UInt32)">
            <summary>Convert a given signed integer value to a string and concatenate onto the stringbuilder. Assume base ten.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Int32,System.UInt32,System.Char)">
            <summary>Convert a given signed integer value to a string and concatenate onto the stringbuilder. Assume base ten.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Single,System.UInt32,System.UInt32,System.Char)">
            <summary>Convert a given float value to a string and concatenate onto the stringbuilder</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Single)">
            <summary>Convert a given float value to a string and concatenate onto the stringbuilder. Assumes five decimal places, and no padding.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Single,System.UInt32)">
            <summary>Convert a given float value to a string and concatenate onto the stringbuilder. Assumes no padding.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.Concat(System.Text.StringBuilder,System.Single,System.UInt32,System.UInt32)">
            <summary>Convert a given float value to a string and concatenate onto the stringbuilder.</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.ConcatFormat``1(System.Text.StringBuilder,System.String,``0)">
            <summary>Concatenate a formatted string with arguments</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.ConcatFormat``2(System.Text.StringBuilder,System.String,``0,``1)">
            <summary>Concatenate a formatted string with arguments</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.ConcatFormat``3(System.Text.StringBuilder,System.String,``0,``1,``2)">
            <summary>Concatenate a formatted string with arguments</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.ConcatFormat``4(System.Text.StringBuilder,System.String,``0,``1,``2,``3)">
            <summary>Concatenate a formatted string with arguments</summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringBuilderExts.ConcatFormatValue``1(System.Text.StringBuilder,``0,System.String,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>The worker method. This does a garbage-free conversion of a generic type, and uses the garbage-free Concat() to add to the stringbuilder</summary>
        </member>
        <member name="T:Primrose.Primitives.Extensions.StringExts">
            <summary>
            Provides extension methods for string values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.Multiline(System.String,System.Int32,System.String)">
            <summary>
            Provides a multiline representation of a string
            </summary>
            <param name="input">The input string</param>
            <param name="maxLineLength">The maximum length of each line</param>
            <param name="separator">The line separator</param>
            <returns>A multiline representation of a string. Each new line is preceded by a newline "\n" character</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.SplitBy(System.String,System.Char,System.Int32)">
            <summary>Splits a string every nth occurence of a character</summary>
            <param name="input">The input string</param>
            <param name="separator">The character seperator to split</param>
            <param name="n">The number of split parts in each element</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.SplitToLines(System.String,System.Int32)">
            <summary>Splits a string by words, keeping each line within a maximum number of characters</summary>
            <param name="stringToSplit">The input string</param>
            <param name="maxLineLength">The maximum number of characters in a line</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.Scramble(System.String,System.Random)">
            <summary>
            Scrambles a string by rearranging its characters in a random order.
            </summary>
            <param name="str">The input string</param>
            <param name="rand">The random object</param>
            <returns>A string with its characters scrambled</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rand"/> cannot be null</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F``1(System.String,``0)">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <typeparam name="T1"></typeparam>
            <param name="fmt">A composite format string.</param>
            <param name="o1">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F``2(System.String,``0,``1)">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="fmt">A composite format string.</param>
            <param name="o1">The object to format.</param>
            <param name="o2">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F``3(System.String,``0,``1,``2)">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="fmt">A composite format string.</param>
            <param name="o1">The object to format.</param>
            <param name="o2">The object to format.</param>
            <param name="o3">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F(System.String,System.Object)">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <param name="fmt">A composite format string.</param>
            <param name="o1">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F(System.String,System.Object,System.Object)">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <param name="fmt">A composite format string.</param>
            <param name="o1">The object to format.</param>
            <param name="o2">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F(System.String,System.Object,System.Object,System.Object)">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <param name="fmt">A composite format string.</param>
            <param name="o1">The object to format.</param>
            <param name="o2">The object to format.</param>
            <param name="o3">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.F(System.String,System.Object[])">
            <summary>Replaces one or more format items in a specified string with the string representation of a specified object.</summary>
            <param name="fmt">A composite format string.</param>
            <param name="args">The objects to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of the respective arguments</returns>
            <exception cref="T:System.ArgumentNullException">format is null.</exception>
            <exception cref="T:System.FormatException">The format item in format is invalid.-or- The index of a format item is not zero.</exception>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <param name="s5">The fifth string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <param name="s5">The fifth string to concatenate.</param>
            <param name="s6">The sixth string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <param name="s5">The fifth string to concatenate.</param>
            <param name="s6">The sixth string to concatenate.</param>
            <param name="s7">The seventh string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <param name="s5">The fifth string to concatenate.</param>
            <param name="s6">The sixth string to concatenate.</param>
            <param name="s7">The seventh string to concatenate.</param>
            <param name="s8">The eighth string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <param name="s5">The fifth string to concatenate.</param>
            <param name="s6">The sixth string to concatenate.</param>
            <param name="s7">The seventh string to concatenate.</param>
            <param name="s8">The eighth string to concatenate.</param>
            <param name="s9">The ninth string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.StringExts.C(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Concatenates two specified instances of System.String.</summary>
            <param name="s1">The first string to concatenate.</param>
            <param name="s2">The second string to concatenate.</param>
            <param name="s3">The third string to concatenate.</param>
            <param name="s4">The fourth string to concatenate.</param>
            <param name="s5">The fifth string to concatenate.</param>
            <param name="s6">The sixth string to concatenate.</param>
            <param name="s7">The seventh string to concatenate.</param>
            <param name="s8">The eighth string to concatenate.</param>
            <param name="s9">The ninth string to concatenate.</param>
            <param name="s10">The tenth string to concatenate.</param>
            <returns>The concatenation of the specified strings.</returns>
        </member>
        <member name="T:Primrose.Primitives.Extensions.TypeExts">
            <summary>
            Provides extension methods for Type values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Extensions.TypeExts.BaseTypes(System.Type)">
            <summary>
            Enumerates of the base class types of a given type
            </summary>
            <param name="t">The type to be enumerated</param>
            <returns>A enumeration of types that is inherited by <paramref name="t"/></returns>
        </member>
        <member name="M:Primrose.Primitives.Extensions.TypeExts.GetSizeInBytes(System.Type)">
            <summary>
            Determines the size, in bytes, of a type, usually a struct
            </summary>
            <param name="t">The type to inspect</param>
            <returns>The size, in bytes, of one instance of the given type</returns>
        </member>
        <member name="T:Primrose.Primitives.IIdentity">
            <summary>
            Implements an ID object
            </summary>
        </member>
        <member name="P:Primrose.Primitives.IIdentity.ID">
            <summary>The instance ID</summary>
        </member>
        <member name="T:Primrose.Primitives.IIdentity`1">
            <summary>
            Implements an ID object
            </summary>
        </member>
        <member name="P:Primrose.Primitives.IIdentity`1.ID">
            <summary>The instance ID</summary>
        </member>
        <member name="T:Primrose.Primitives.ISetIdentity">
            <summary>
            Implements an ID object
            </summary>
        </member>
        <member name="P:Primrose.Primitives.ISetIdentity.ID">
            <summary>The instance ID</summary>
        </member>
        <member name="T:Primrose.Primitives.ISetIdentity`1">
            <summary>
            Implements an ID object
            </summary>
        </member>
        <member name="P:Primrose.Primitives.ISetIdentity`1.ID">
            <summary>The instance ID</summary>
        </member>
        <member name="T:Primrose.Primitives.Observables.ChangeEventDelegate`1">
            <summary>
            A delegate representing a change in value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newValue">Represents the new value</param>
            <param name="oldValue">Represents the old value</param>
        </member>
        <member name="T:Primrose.Primitives.Observables.ObservableList`2">
            <summary>Represents a list with events that notify on modification</summary>
            <typeparam name="TList">The type of the list</typeparam>
            <typeparam name="T">The type of elements in the list</typeparam>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableList`2.ListChanged">
            <summary>Represents the set of functions to be called when the registry is replaced</summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableList`2.ItemAdded">
            <summary>Represents the set of functions to be called when a key is added</summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableList`2.ItemRemoved">
            <summary>Represents the set of functions to be called when a key is removed</summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableList`2.ItemChanged">
            <summary>Represents the set of functions to be called when a value is changed</summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.#ctor(`0)">
            <summary>Represents a list with events that notify on modification</summary>
            <param name="source">The initial list. No events are fired on the assignment of the initial list.</param>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableList`2.Item(System.Int32)">
            <summary>Gets or sets an element in the list, accessed by an index</summary>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableList`2.Count">
            <summary>Gets the number of elements contained in the list</summary>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableList`2.IsReadOnly">
            <summary>Gets a value indicating whether the list is read-only</summary>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableList`2.List">
            <summary>The encapsulated list. Direct method calls to the encapsulated object will not trigger any events.</summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.Add(`1)">
            <summary>Adds an item to the list</summary>
            <param name="item">The object to add to the list</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.Clear">
            <summary>Removes all items from the list</summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.Contains(`1)">
            <summary>Determines if the list contains a specific value</summary>
            <param name="item">The object to locate in the list</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.CopyTo(`1[],System.Int32)">
            <summary>Copies the elements of the list to an array, starting at a particular index.</summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied the list. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.IndexOf(`1)">
            <summary>Determines the index of a specific item in the list</summary>
            <param name="item">The object to locate in the list</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.Insert(System.Int32,`1)">
            <summary>Inserts an item to the list at the specified index.</summary>
            <param name="index">The zero-based index at which item should be inserted</param>
            <param name="item">The object to insert into the list</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.Remove(`1)">
            <summary>Removes the first occurrence of a specific object from the list</summary>
            <param name="item">The object to remove from the item</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableList`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
        </member>
        <member name="T:Primrose.Primitives.Observables.ObservableRegistry`2">
            <summary>
            A wrapper for binding modification events to a registry
            </summary>
            <typeparam name="K">The encapsulated key type</typeparam>
            <typeparam name="V">The encapsulated value type</typeparam>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableRegistry`2.RegistryChanged">
            <summary>Represents the set of functions to be called when the registry is replaced</summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableRegistry`2.KeyAdded">
            <summary>Represents the set of functions to be called when a key is added</summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableRegistry`2.KeyRemoved">
            <summary>Represents the set of functions to be called when a key is removed</summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableRegistry`2.ValueChanged">
            <summary>Represents the set of functions to be called when a value is changed</summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.#ctor(Primrose.Primitives.Factories.Registry{`0,`1})">
            <summary>Defines an event-bounded registry</summary>
            <param name="reg">The initial registry. No events are fired on the assignment of the initial registry.</param>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableRegistry`2.Registry">
            <summary>
            The encapsulated registry. Direct method calls to the encapsulated object will not trigger any events.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.GetUnderlyingConcreteDictionary">
            <summary>Retrieves the underlying dictionary in its concrete form. Useful if avoiding allocations due to IDictionary cast is needed. Use it only when you know what you are doing</summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.GetUnderlyingDictionary">
            <summary>Retrieves the underlying dictionary</summary>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableRegistry`2.Item(`0)">
            <summary>Gets or sets an element in the list, accessed by an index</summary>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableRegistry`2.Count">
            <summary>Gets the number of elements contained in the registry</summary>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.Contains(`0)">
            <summary>Determines whether the registry contains a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>True if the registry contains this key, False if otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.Get(`0)">
            <summary>Retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key. If the registry does not contain this key, returns Default</returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.GetX(`0)">
            <summary>Strictly retrieves the value associated with a key</summary>
            <param name="key">The identifier key to check</param>
            <returns>The value associated with the key</returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.GetKeys">
            <summary>Retrives an array of all the keys in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.GetValues">
            <summary>Retrives an array of all the values in the registry</summary>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.Add(`0,`1)">
            <summary>Adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.Put(`0,`1)">
            <summary>Updates or adds an object into the registry</summary>
            <param name="key">The identifier key to add</param>
            <param name="item">The object to be associated with this key</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.Remove(`0)">
            <summary>Removes an object from the registry</summary>
            <param name="key">The identifier key to remove</param>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableRegistry`2.Clear">
            <summary>Purges all data from the registry</summary>
        </member>
        <member name="T:Primrose.Primitives.Observables.ObservableValue`1">
            <summary>
            A wrapper for binding modification events to a variable
            </summary>
            <typeparam name="T">The encapsulated type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Observables.ObservableValue`1.#ctor(`0)">
            <summary>Creates an ObservableValue with an initialValue. The initial value does not trigger events</summary>
            <param name="initialValue"></param>
        </member>
        <member name="P:Primrose.Primitives.Observables.ObservableValue`1.Value">
            <summary>
            The encapsulated value
            </summary>
        </member>
        <member name="E:Primrose.Primitives.Observables.ObservableValue`1.ValueChanged">
            <summary>Represents the set of functions to be called when a value is changed</summary>
        </member>
        <member name="T:Primrose.Primitives.Parsers.RuleConversionException">
            <summary>Defines an exception for errors encountered in parsing and writing conversions</summary>
        </member>
        <member name="M:Primrose.Primitives.Parsers.RuleConversionException.#ctor(System.Type,System.String)">
            <summary>Defines an exception for errors encountered in parsing and writing conversions</summary>
            <param name="t">The type of the attempted parse</param>
            <param name="value">The string value that failed the parse</param>
        </member>
        <member name="T:Primrose.Primitives.Parsers.UnsupportedParseException`1">
            <summary>Defines an exception for errors encountered by an attempt to parse to an unsupported type</summary>
            <typeparam name="T">The unsupported type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Parsers.UnsupportedParseException`1.#ctor">
            <summary>Defines an exception for errors encountered by an attempt to parse to an unsupported type</summary>
        </member>
        <member name="T:Primrose.Primitives.Parsers.UnsupportedWriteException`1">
            <summary>Defines an exception for errors encountered by an attempt to write from an unsupported type</summary>
            <typeparam name="T">The unsupported type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.Parsers.UnsupportedWriteException`1.#ctor">
            <summary>Defines an exception for errors encountered by an attempt to write from an unsupported type</summary>
        </member>
        <member name="T:Primrose.Primitives.Parsers.IResolver">
            <summary>Allows customized resolution of parsing contentions, if any</summary>
        </member>
        <member name="M:Primrose.Primitives.Parsers.IResolver.Resolve(System.String)">
            <summary>Resolves parsing contentions for a given input</summary>
            <param name="input">The input to resolve</param>
        </member>
        <member name="T:Primrose.Primitives.Parsers.Parser">
            <summary>Handles the parsing of primitive values to strings and vice versa</summary>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Parse``1(System.String,``0)">
            <summary>Parses a value from its string representation</summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value to be parsed</param>
            <param name="defaultValue">The default value</param>
            <returns>The parsed value, or defaultValue if the string is invalid</returns>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Parse``1(System.String,Primrose.Primitives.Parsers.IResolver,``0)">
            <summary>Parses a value from its string representation</summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value to be parsed</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>The parsed value, or defaultValue if the string is invalid</returns>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Parse``1(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a value from its string representation</summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value to be parsed</param>
            <param name="resolver">A string resolver function</param>
            <returns>The parsed value</returns>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Write``1(``0)">
            <summary>Converts a value to its string representation</summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="value">The value to be converted to a string</param>
            <returns>The string representation of the value</returns>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.AddRule``1(System.Func{System.String,Primrose.Primitives.Parsers.IResolver,``0},System.Int32,System.Func{``0,System.String})">
            <summary>Adds a rule to convert between an object and its string representation</summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="parserRule">The rule for parsing a string to the object</param>
            <param name="tokens">The number of comma delimited elements assigned to a single instance of the object, in the case of array initialization</param>
            <param name="writerRule">The rule for expression the object as a string</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.DeleteRule``1">
            <summary>Deletes the conversion rules for an object type</summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="T:Primrose.Primitives.Parsers.Parser.Rules">
            <summary>Defines parsing rules for interpreting strings into values</summary>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToString(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Resolves a string value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToBool(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a bool value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToByte(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a byte value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToByte2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a byte2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToByte3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a byte3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToByte4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a byte4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToSByte(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a sbyte value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToSByte2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a sbyte2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToSByte3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a sbyte3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToSByte4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a sbyte4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToShort(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a short value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToShort2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a short2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToShort3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a short3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToShort4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a short4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUShort(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a ushort value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUShort2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a ushort2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUShort3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a ushort3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUShort4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a ushort4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToInt(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an int value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToInt2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an int2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToInt3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an int3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToInt4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an int4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToIntRect(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an intRect value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUInt(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an uint value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUInt2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an uint2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUInt3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an uint3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToUInt4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an uint4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToLong(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a long value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToULong(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an ulong value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToFloat(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a float value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToFloat2(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a float2 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToFloat3(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a float3 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToFloat4(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a float4 value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToDouble(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a double value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToNullable``1(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a nullable value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToNullableEnum``1(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to a nullable value</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToArray``1(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an array of values</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToArrayAsElement``1(System.String,Primrose.Primitives.Parsers.IResolver)">
            <summary>Parses a string to an array of values</summary>
            <param name="value">The string to be parsed</param>
            <param name="resolver">A string resolver function</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToEnum``1(System.String)">
            <summary>Parses a string to a enumerated value</summary>
            <param name="value">The string to be parsed</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToEnumArray``1(System.String)">
            <summary>Parses a string to an array of enumerated values</summary>
            <param name="value">The string to be parsed</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ToStrGeneric``1(``0)">
            <summary>Converts a value to a string</summary>
            <param name="value">The value to be converted</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ArrayToStr``1(``0)">
            <summary>Converts an array of values to a string</summary>
            <param name="list">The value to be converted</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.ArrayToStrByElement``1(``0[])">
            <summary>Converts an array of values to a string</summary>
            <param name="list">The value to be converted</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.EnumToStr``1(``0)">
            <summary>Converts an enumerated value to a string</summary>
            <param name="value">The value to be converted</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.EnumArrayToStr``1(``0)">
            <summary>Converts an array of enumerated values to a string</summary>
            <param name="list">The value to be converted</param>
        </member>
        <member name="M:Primrose.Primitives.Parsers.Parser.Rules.VecNToStr``1(``0)">
            <summary>Converts a vectorized value to a string</summary>
            <param name="value">The value to be converted</param>
        </member>
        <member name="T:Primrose.Primitives.Pipelines.Pipeline`1">
            <summary>
            Maintains and executes objects in an queue. Useful for FIFO procedures like UI modifications.
            </summary>
            <typeparam name="T">A piped object</typeparam>
        </member>
        <member name="F:Primrose.Primitives.Pipelines.Pipeline`1.MaxExecutionsPerRun">
            <summary>The maximum number of piped objects to be executed per call to Run()</summary>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.Pipeline`1.#ctor(System.Int32)">
            <summary>
            Creates a pipeline
            </summary>
            <param name="maxExecutionsPerRun">The maximum number of piped objects to be executed per call to Run()</param>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.Pipeline`1.Queue(`0)">
            <summary>Queues an piped object into the pipeline</summary>
            <param name="item"></param>
        </member>
        <member name="P:Primrose.Primitives.Pipelines.Pipeline`1.Count">
            <summary>Returns the number of piped objects in the pipeline</summary>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.Pipeline`1.Run">
            <summary>Runs the execution of queued objects, up to a limit defined by MaxExecutionsPerRun. Returns the number of queued objects run</summary>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.Pipeline`1.OnStartCycle">
            <summary>The method executed just before the start of each execution cycle</summary>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.Pipeline`1.OnEndCycle">
            <summary>The method executed just after the end of each execution cycle</summary>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.Pipeline`1.Clear">
            <summary>Clears the queue without execution</summary>
        </member>
        <member name="T:Primrose.Primitives.Pipelines.IPipedObject">
            <summary>
            Defines a piped object to be processed in a pipeline
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Pipelines.IPipedObject.Execute">
            <summary>Provides execution entry point from the pipeline</summary>
        </member>
        <member name="T:Primrose.Primitives.ScopedManager`1">
            <summary>
            Attaches objects to a scope
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Primrose.Primitives.ScopedManager`1.PoolCount">
            <summary>The number of scope objects in the pool</summary>
        </member>
        <member name="M:Primrose.Primitives.ScopedManager`1.Scope(`0)">
            <summary>
            Attaches a scope to an item
            </summary>
            <param name="item">The item to be scoped</param>
            <returns>The assigned scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopedManager`1.Check(`0)">
            <summary>
            Checks a scope to an item
            </summary>
            <param name="item">The item to be scoped</param>
            <returns>The reference counter in the scope</returns>
        </member>
        <member name="T:Primrose.Primitives.ScopedManager`1.ScopedItem">
            <summary>Represents a scope</summary>
        </member>
        <member name="P:Primrose.Primitives.ScopedManager`1.ScopedItem.Value">
            <summary>The item in scope</summary>
        </member>
        <member name="T:Primrose.Primitives.ScopeCounters">
            <summary>
            Provides implementation for maintaining a reference counter for explicit management
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.Get(System.Byte)">
            <summary>Gets the reference count of a global scope</summary>
            <param name="global">The global scope</param>
            <returns>The reference count of the scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.Get(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Gets the reference count of a local scope</summary>
            <param name="scope">The local scope</param>
            <returns>The reference count of the scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.Acquire(System.Byte)">
            <summary>Increments the reference count of a global scope, then returns the updated scope</summary>
            <param name="global">The global scope</param>
            <returns>The updated scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.Acquire(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Increments the reference count of a local scope, then returns the updated scope</summary>
            <param name="scope">The local scope</param>
            <returns>The updated scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.Reset(System.Byte)">
            <summary>Resets the reference count of a global scope to zero</summary>
            <param name="global">The global scope</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.Reset(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Resets the reference count of a global scope to zero</summary>
            <param name="scope">The local scope</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.ReleaseOne(System.Byte)">
            <summary>Decrements the reference count of a global scope</summary>
            <param name="global">The global scope</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.ReleaseOne(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Decrements the reference count of a local scope</summary>
            <param name="scope">The local scope</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.ReleaseOne(Primrose.Primitives.ScopeCounters.ScopeGlobalCounter)">
            <summary>Decrements the reference count of a global scope</summary>
            <param name="scope">The global scope</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.AcquireIfZero(System.Byte)">
            <summary>Increments the reference count of a global scope only if the count is zero</summary>
            <param name="global">The global scope</param>
            <returns>True if acquired, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.AcquireIfZero(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Increments the reference count of a local scope only if the count is zero</summary>
            <param name="scope">The local scope</param>
            <returns>True if acquired, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.AcquireWhenZero(System.Byte)">
            <summary>Performs a spinlock until the reference count of a global scope is zero, then increments the reference count</summary>
            <param name="global">The global scope</param>
            <returns>The updated scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.AcquireWhenZero(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Performs a spinlock until the reference count of a local scope is zero, then increments the reference count</summary>
            <param name="scope">The local scope</param>
            <returns>The updated scope</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Returns if the reference count of a scope is zero</summary>
            <param name="t1">The scope to check</param>
            <returns>True if the reference count is zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(System.Byte)">
            <summary>Returns if the reference count of a scope is zero</summary>
            <param name="t1">The scope to check</param>
            <returns>True if the reference count is zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter,System.Byte)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(System.Byte,System.Byte)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter,System.Byte)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter,System.Byte,System.Byte)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(System.Byte,System.Byte,System.Byte)">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(Primrose.Primitives.ScopeCounters.ScopeCounter[])">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="ts">The list of scopes to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.IsZero(System.Byte[])">
            <summary>Returns if the reference count of all scopes is zero</summary>
            <param name="ts">The list of scopes to check</param>
            <returns>True if all reference counts are zero, false otherwise</returns>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Performs a spinlock until the reference count of a global scope is zero.</summary>
            <param name="t1">The scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(System.Byte)">
            <summary>Performs a spinlock until the reference count of a global scope is zero.</summary>
            <param name="t1">The scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter,System.Byte)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(System.Byte,System.Byte)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter,Primrose.Primitives.ScopeCounters.ScopeCounter,System.Byte)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter,System.Byte,System.Byte)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(System.Byte,System.Byte,System.Byte)">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="t1">The first scope to check</param>
            <param name="t2">The second scope to check</param>
            <param name="t3">The third scope to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(Primrose.Primitives.ScopeCounters.ScopeCounter[])">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="ts">The list of scopes to check</param>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.WaitForZero(System.Byte[])">
            <summary>Performs a spinlock until all reference counts are zero.</summary>
            <param name="ts">The list of scopes to check</param>
        </member>
        <member name="T:Primrose.Primitives.ScopeCounters.ScopeGlobalCounter">
            <summary>
            Represents a global scope reference counter
            </summary>
        </member>
        <member name="F:Primrose.Primitives.ScopeCounters.ScopeGlobalCounter.Token">
            <summary>The global scope reference value</summary>
        </member>
        <member name="P:Primrose.Primitives.ScopeCounters.ScopeGlobalCounter.Count">
            <summary>The global scope reference count</summary>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.ScopeGlobalCounter.Dispose">
            <summary>Decrements the reference count</summary>
        </member>
        <member name="T:Primrose.Primitives.ScopeCounters.ScopeCounter">
            <summary>
            Represents a local scope reference counter
            </summary>
        </member>
        <member name="P:Primrose.Primitives.ScopeCounters.ScopeCounter.Count">
            <summary>The global scope reference count</summary>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.ScopeCounter.#ctor">
            <summary>Creates a scope reference counter</summary>
        </member>
        <member name="M:Primrose.Primitives.ScopeCounters.ScopeCounter.Dispose">
            <summary>Decrements the reference count</summary>
        </member>
        <member name="T:Primrose.Primitives.StateMachines.InvalidStateCommandException`2">
            <summary>Represents an exception as a result of an invalid state command</summary>
            <typeparam name="T">The state type</typeparam>
            <typeparam name="U">The command type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.InvalidStateCommandException`2.#ctor(`1,`0)">
            <summary>Represents an exception as a result of an invalid state command</summary>
            <param name="command">The command</param>
            <param name="state">The state</param>
        </member>
        <member name="T:Primrose.Primitives.StateMachines.StateMachine`3">
            <summary>
            A programmable finite state machine, using commands to perform state changes and execute transition actions. This state machine itself does not store the state.
            </summary>
            <typeparam name="O">A parameterized object type that is passed into transition actions</typeparam>
            <typeparam name="T">The state type</typeparam>
            <typeparam name="U">The command type</typeparam>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.Initialize(`0,`1)">
            <summary>Initializes the state machine with an initial state</summary>
            <param name="owner">The owner object</param>
            <param name="state">The initial state</param>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.In(`1)">
            <summary></summary>
            <param name="state">The state</param>
            <returns>The finite state machine, now programmed with a state, awaiting further instructions</returns>
        </member>
        <member name="T:Primrose.Primitives.StateMachines.StateMachine`3.InStateMachine">
            <summary>
            Defines a programmable finite state machine, now programmed with a state.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.InStateMachine.On(`2)">
            <summary>Adds the state change command in the programming condition</summary>
            <param name="command">The new command acting on this state</param>
            <returns>The finite state machine, now programmed with the new state change command, awaiting further instructions</returns>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.InStateMachine.ExecuteOnEntry(System.Action{`0,`1})">
            <summary>Instructs the state machine to execute an action on entering this state, regardless of command</summary>
            <param name="action">The action to be executed</param>
            <returns>The same state machine, awaiting further instructions</returns>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.InStateMachine.ExecuteOnExit(System.Action{`0,`1})">
            <summary>Instructs the state machine to execute an action on exiting this state, regardless of command</summary>
            <param name="action">The action to be executed</param>
            <returns>The same state machine, awaiting further instructions</returns>
        </member>
        <member name="T:Primrose.Primitives.StateMachines.StateMachine`3.OutStateMachine">
            <summary>
            Defines a programmable finite state machine, now programmed with an initial state and a state change command.
            </summary>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.OutStateMachine.On(`2)">
            <summary>Switches the state change command</summary>
            <param name="command">The new command acting on the initial state</param>
            <returns>The finite state machine, now programmed with the new state change command</returns>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.OutStateMachine.Goto(`1)">
            <summary>Instructs the state machine to transit to a new state from this initial state and state change command</summary>
            <param name="targetstate">The new state to transition into</param>
            <returns>The same state machine, awaiting further instructions</returns>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.OutStateMachine.Execute(System.Action{`0,`1})">
            <summary>Instructs the state machine to execute a transition action from this initial state and state change command</summary>
            <param name="action">The action to be executed</param>
            <returns>The same state machine, awaiting further instructions</returns>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.Fire(`0,`2,`1@)">
            <summary>
            Fires a command and performs any state changes or transition actions.
            </summary>
            <param name="owner">The parameterized owner object to be passed to any transition action that is executed by this command</param>
            <param name="command">The command</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Primrose.Primitives.StateMachines.StateMachine`3.IsValid(`2,`1)">
            <summary>
            Determines if a command is valid at this state
            </summary>
            <param name="command">The command</param>
            <param name="state">The state</param>
        </member>
        <member name="T:Primrose.Primitives.LinkedListEnumerable`1">
            <summary>Represents an enumeration of items in a linked list</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Primrose.Primitives.LinkedListEnumerable`1.#ctor(System.Collections.Generic.LinkedList{`0})">
            <summary>Creates the enumerable</summary>
        </member>
        <member name="M:Primrose.Primitives.LinkedListEnumerable`1.GetEnumerator">
            <summary>Gets the enumerator</summary>
        </member>
        <member name="F:Primrose.Primitives.LinkedListEnumerable`1.Empty">
            <summary>The enumerator for an empty list</summary>
        </member>
        <member name="T:Primrose.Primitives.LinkedListEnumerator`1">
            <summary>Represents an enumerator of items in a linked list</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Primrose.Primitives.LinkedListEnumerator`1.#ctor(System.Collections.Generic.LinkedList{`0})">
            <summary>Creates an enumerator</summary>
        </member>
        <member name="M:Primrose.Primitives.LinkedListEnumerator`1.MoveNext">
            <summary>Retrieves the next item</summary>
        </member>
        <member name="P:Primrose.Primitives.LinkedListEnumerator`1.Current">
            <summary>Retrieves the current item</summary>
        </member>
        <member name="T:Primrose.Primitives.Stocks.FlowResultType">
            <summary>The result types of a flow check against the stock</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResultType.NORMAL">
            <summary>The result is normal</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResultType.INVALID">
            <summary>The result is abnormal and should not be applied</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResultType.LOWERBOUNDREACHED">
            <summary>The result is normal and the lower bound of the stock value is reached</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResultType.UPPERBOUNDREACHED">
            <summary>The result is normal and the upper bound of the stock value is reached</summary>
        </member>
        <member name="T:Primrose.Primitives.Stocks.FlowResult`1">
            <summary>The result of a flow check against the stock</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResult`1.Result">
            <summary>The result type that determines further operations</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResult`1.Normal">
            <summary>The value of the flow that can be admitted into the stock</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowResult`1.Discrepancy">
            <summary>The value of the flow that cannot be admitted into the stock, either limited by lower bound or upper bonds on the stock</summary>
        </member>
        <member name="M:Primrose.Primitives.Stocks.FlowResult`1.#ctor(Primrose.Primitives.Stocks.FlowResultType,`0,`0)">
            <summary>The result of a flow check against the stock</summary>
        </member>
        <member name="T:Primrose.Primitives.Stocks.Flow`1">
            <summary>Defines an input or output flow relative to a stock container.</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Flow`1.FlowValueFunction">
            <summary>Defines the function that determines the flow value</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Flow`1.CheckFunction">
            <summary>Defines the function that checks the application of the flow to the stock</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Flow`1.FlowAction">
            <summary>Defines the action to take when applying the flow to the stock</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Flow`1.UpperBoundReachedAction">
            <summary>Defines the action to take for any flow value beyond the upper bound</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Flow`1.LowerBoundReachedAction">
            <summary>Defines the action to take for any flow value beyond the lower bound</summary>
        </member>
        <member name="M:Primrose.Primitives.Stocks.Flow`1.Execute(Primrose.Primitives.Stocks.Stock{`0})">
            <summary>Performs one round of execution for the flow</summary>
            <param name="stock">The stock affected by the flow</param>
            <returns>The result of evaluating the flow</returns>
        </member>
        <member name="T:Primrose.Primitives.Stocks.FlowFunctionHelper">
            <summary>This class contains prebuilt functions to assist in the default creation of flows.</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowFunctionHelper.CheckFunction_Integer">
            <summary>This function mimics the check functions for a numeric flow by addition</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowFunctionHelper.CheckFunction_Float">
            <summary>This function mimics the check functions for a numeric flow by addition</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowFunctionHelper.FlowAction_Integer">
            <summary>This action mimics the application a numeric flow by addition</summary>
        </member>
        <member name="F:Primrose.Primitives.Stocks.FlowFunctionHelper.FlowAction_Float">
            <summary>This action mimics the application a numeric flow by addition</summary>
        </member>
        <member name="M:Primrose.Primitives.Stocks.FlowFunctionHelper.GetDefaultFlow_Integer">
            <summary>Creates a new flow with default checks for numeric values</summary>
        </member>
        <member name="M:Primrose.Primitives.Stocks.FlowFunctionHelper.GetDefaultFlow_Float">
            <summary>Creates a new flow with default checks for numeric values</summary>
        </member>
        <member name="T:Primrose.Primitives.Stocks.Stock`1">
            <summary>Defines a container for holding a value.</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Stock`1.HasMinimum">
            <summary>Defines whether this stock container has a lower bound for the value</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Stock`1.HasMaximum">
            <summary>Defines whether this stock container has a upper bound for the value</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Stock`1.Value">
            <summary>The value expressed in the stock</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Stock`1.Minimum">
            <summary>The lower bound value of the stock, used only if HasMinimum is true</summary>
        </member>
        <member name="P:Primrose.Primitives.Stocks.Stock`1.Maximum">
            <summary>The upper bound value of the stock, used only if HasMaximum is true</summary>
        </member>
        <member name="M:Primrose.Primitives.Stocks.Stock`1.IsAtMinimum">
            <summary>Returns true if the HasMinimum is enabled and the value is at the lower bound value</summary>
        </member>
        <member name="M:Primrose.Primitives.Stocks.Stock`1.IsAtMaximum">
            <summary>Returns true if the HasMaximum is enabled and the value is at the upper bound value</summary>
        </member>
        <member name="T:Primrose.Primitives.Streams.VirtualStream">
            <summary>Defines a virtualized stream residing in another stream</summary>
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.BaseStream">
            <summary>The underlying stream</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>Defines a virtualized stream residing in another stream</summary>
            <param name="baseStream">The underlying stream content</param>
            <param name="baseOffset">The offset position in the underlying stream</param>
            <param name="streamLength">The length of the virtual snapshot</param>
            <param name="isBuffered">Denotes whether the virtual stream maintains its own content buffer instead of manipulating the base stream directly</param>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Defines a virtualized stream residing in another stream</summary>
            <param name="baseStream">The underlying stream content</param>
            <param name="isBuffered">Denotes whether the virtual stream maintains its own content buffer instead of manipulating the base stream directly</param>
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.Length">
            <inheritdoc />
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadCString(System.Int32)">
            <summary>Reads a sequence of bytes as a null-terminated string</summary>
            <param name="count">The number of characters</param>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.Read(System.Int32)">
            <summary>Reads a sequence of bytes of a specific length</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadSigned(System.Int32)">
            <summary>Reads a sequence of signed bytes of a specific length</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadByte">
            <summary>Reads a single byte</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadSByte">
            <summary>Reads a single signed byte</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadUInt8">
            <summary>Reads a single byte</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadInt32">
            <summary>Reads a single 32-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadUInt32">
            <summary>Reads a single 32-bit signed integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadInt16">
            <summary>Reads a single 16-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadUInt16">
            <summary>Reads a single 16-bit signed integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadFloat">
            <summary>Reads a single 16-bit floating-point value</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.ReadDouble">
            <summary>Reads a single 32-bit floating-point value</summary>
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.Close">
            <inheritdoc />
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.Position">
            <inheritdoc />
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.Remaining">
            <summary>Indicates the remaining length of the stream</summary>
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.Eof">
            <summary>Indicates whether the stream is at end-of-file</summary>
        </member>
        <member name="P:Primrose.Primitives.Streams.VirtualStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="M:Primrose.Primitives.Streams.VirtualStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="T:Primrose.Primitives.Strings.FormatInstruction">
            <summary>Represents a format instruction for generating a string</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.FormatInstruction.StoredSize">
            <summary>Describe the memory size of the value, only if the value is a valuetype</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredSize._8BIT">
            <summary>Denotes an 8-bit value</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredSize._16BIT">
            <summary>Denotes a 16-bit value</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredSize._32BIT">
            <summary>Denotes a 32-bit value</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredSize._64BIT">
            <summary>Denotes a 64-bit value</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.FormatInstruction.StoredType">
            <summary>Describe the the type of the value</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredType.UNSIGNED_INTEGER">
            <summary>Denotes an unsigned integer</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredType.SIGNED_INTEGER">
            <summary>Denotes an unsigned integer</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredType.FLOATING_POINT">
            <summary>Denotes an unsigned integer</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredType.DATE_TIME">
            <summary>Denotes a datetime, represented by a 64-bit integer</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.StoredType.REFERENCE_TYPE">
            <summary>Denotes an unsigned integer</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.FormatInstruction.NumericBase">
            <summary>Describe the the base of the numeric value</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.NumericBase.DECIMAL">
            <summary>Denotes base-10, or decimal representation</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.NumericBase.HEXADECIMAL">
            <summary>Denotes base-16, or hexadecimal representation</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.NumericBase.OCTAL">
            <summary>Denotes base-8, or octal representation</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.FormatInstruction.NumericBase.BINARY">
            <summary>Denotes base-2, or binary representation</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.Size">
            <summary>Returns the memory size of the value. This is ignored if the type is a reference type</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.Type">
            <summary>Returns the the type of the value</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.PadAlignment">
            <summary>Returns whether the padding characters are to be inserted to the left or to the right</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.PadCharacter">
            <summary>Returns the padding character</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.PadLength">
            <summary>Returns the padding length</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.NegativeFormat">
            <summary>Returns the format behavior for negative signed integers</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.IntegerBase">
            <summary>Returns the format behavior for integers</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.DataFormat">
            <summary>Returns the format string for datetime representation</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.ExpectedLength">
            <summary>Returns the expected length without padding</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.DecimalPlaces">
            <summary>Returns the number of decimal places for floating-point numerics</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.FormatInstruction.IntegerPlaces">
            <summary>Returns the number of integer places for floating-point numerics</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.SByte,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 8-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.Byte,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an signed 8-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.UInt16,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 16-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.Int16,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an signed 16-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.UInt32,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 32-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.Int32,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an signed 32-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.UInt64,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 64-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.Int64,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an signed 64-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.Single,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,System.Byte,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from a 32-bit floating-point value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.#ctor(System.Double,Primrose.Primitives.Strings.FormatInstruction.NumericBase,System.UInt16,Primrose.Primitives.Strings.PadAlignmentType,System.Char,System.Byte,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from a 64-bit floating-point value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.Format">
            <summary>Returns the string representing the value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.FormatInstruction.Format(System.Text.StringBuilder)">
            <summary>Appends the string representing the value to a StringBuilder</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.IFormatter">
            <summary>Represents a format instruction for generating a string from a value and parameters</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.IFormatter.ExpectedLength">
            <summary>Returns the expected length of the string produced by the value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.IFormatter.Format">
            <summary>Returns the string representing the value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.IFormatter.Format(System.Text.StringBuilder)">
            <summary>Appends the string representing the value to a StringBuilder</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.PadAlignmentType">
            <summary>Signals whether the padding characters are to be inserted to the left or to the right</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.PadAlignmentType.LEFT">
            <summary>Signals that the padding characters are to be inserted to the left</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.PadAlignmentType.RIGHT">
            <summary>Signals that the padding characters are to be inserted to the right</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.NegativeFormatType">
            <summary>Signals handling behavior of negative numbers (for numerics)</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.NegativeFormatType.AFTER_PADDING">
            <summary>Signals that the padding characters are to be inserted before the sign character</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.NegativeFormatType.BEFORE_PADDING">
            <summary>Signals that the padding characters are to be inserted after the sign character</summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.NegativeFormatType.OVERFLOW">
            <summary>Signals that the negative sign be not rendered. Instead, the number will be wrapped around its maximum</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.SignedIntegerFormatter">
            <summary>Represents a format instruction for generating a string from an unsigned integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.SignedIntegerFormatter.#ctor(System.SByte,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 8-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.SignedIntegerFormatter.#ctor(System.Int16,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 16-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.SignedIntegerFormatter.#ctor(System.Int32,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 32-bit integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.SignedIntegerFormatter.#ctor(System.Int64,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char,Primrose.Primitives.Strings.NegativeFormatType)">
            <summary>Creates a format instruction for generating a string from an unsigned 64-bit integer value</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.SignedIntegerFormatter.Value">
            <summary>The numeric value</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.SignedIntegerFormatter.Base">
            <summary>The base power. Only values from 2 to 16 are accepted</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.SignedIntegerFormatter.Padding">
            <summary>The length of the string to pad to</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.SignedIntegerFormatter.PadDirection">
            <summary>The padding character</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.SignedIntegerFormatter.PadCharacter">
            <summary>The padding character</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.SignedIntegerFormatter.ExpectedLength">
            <inheritdoc/>
        </member>
        <member name="M:Primrose.Primitives.Strings.SignedIntegerFormatter.Format">
            <inheritdoc/>
        </member>
        <member name="M:Primrose.Primitives.Strings.SignedIntegerFormatter.Format(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Primrose.Primitives.Strings.StringCompiler">
            <summary>
            A class for storing format instructions, for the generation of strings
            </summary>
        </member>
        <member name="F:Primrose.Primitives.Strings.StringCompiler.Items">
            <summary>
            The items to be formatted
            </summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.StringCompiler.CreateString">
            <summary>
            Creates a string from the list of format definitions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Strings.StringSource`1">
            <summary>Defines a data resource that maps a token code to a string resource</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.StringSource`1.Add(`0,System.String)">
            <summary>Registers a new string token with a formatted string</summary>
            <param name="key">The identifier string token</param>
            <param name="formattedString">The formatted string</param>
        </member>
        <member name="M:Primrose.Primitives.Strings.StringSource`1.Put(`0,System.String)">
            <summary>Registers or redefines a new string token with a formatted string</summary>
            <param name="key">The identifier string token</param>
            <param name="formattedString">The formatted string</param>
        </member>
        <member name="M:Primrose.Primitives.Strings.StringSource`1.Get(`0)">
            <summary>Retrieves a formatted string from its code</summary>
            <param name="key">The identifier string code.</param>
        </member>
        <member name="M:Primrose.Primitives.Strings.StringSource`1.Remove(`0)">
            <summary>Removes a new string token</summary>
            <param name="key">The identifier string token to remove</param>
        </member>
        <member name="M:Primrose.Primitives.Strings.StringSource`1.Clear">
            <summary>Clears the source of all tokens</summary>
        </member>
        <member name="T:Primrose.Primitives.Strings.UnsignedIntegerFormatter">
            <summary>Represents a format instruction for generating a string from an unsigned integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.UnsignedIntegerFormatter.#ctor(System.Byte,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char)">
            <summary>Creates a format instruction for generating a string from an 8-bit unsigned integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.UnsignedIntegerFormatter.#ctor(System.UInt16,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char)">
            <summary>Creates a format instruction for generating a string from an 16-bit unsigned integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.UnsignedIntegerFormatter.#ctor(System.UInt32,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char)">
            <summary>Creates a format instruction for generating a string from an 32-bit unsigned integer value</summary>
        </member>
        <member name="M:Primrose.Primitives.Strings.UnsignedIntegerFormatter.#ctor(System.UInt64,System.Int32,System.Int32,Primrose.Primitives.Strings.PadAlignmentType,System.Char)">
            <summary>Creates a format instruction for generating a string from an 64-bit unsigned integer value</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.UnsignedIntegerFormatter.Value">
            <summary>The numeric value</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.UnsignedIntegerFormatter.Base">
            <summary>The base power. Only values from 2 to 16 are accepted</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.UnsignedIntegerFormatter.Padding">
            <summary>The length of the string to pad to</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.UnsignedIntegerFormatter.PadDirection">
            <summary>The padding character</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.UnsignedIntegerFormatter.PadCharacter">
            <summary>The padding character</summary>
        </member>
        <member name="P:Primrose.Primitives.Strings.UnsignedIntegerFormatter.ExpectedLength">
            <inheritdoc/>
        </member>
        <member name="M:Primrose.Primitives.Strings.UnsignedIntegerFormatter.Format">
            <inheritdoc/>
        </member>
        <member name="M:Primrose.Primitives.Strings.UnsignedIntegerFormatter.Format(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Primrose.Primitives.Tasks.TaskHandler">
            <summary>Methods for starting and handling tasks</summary>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew(Primrose.Primitives.Tasks.TaskSet)">
            <summary>Creates and starts a task</summary>
            <param name="taskset">The taskset to run</param>
            <returns>The task generated and started by this method</returns>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew``1(Primrose.Primitives.Tasks.TaskSet{``0},``0)">
            <summary>Creates and starts a task</summary>
            <param name="taskset">The taskset to run</param>
            <param name="state">The parameterized state for the action</param>
            <returns>The task generated and started by this method</returns>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew(System.Action,System.Action{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>Creates and starts a task</summary>
            <param name="action">The main action</param>
            <param name="exception_handler">The action to be performed on encountered exception during execution of the main action</param>
            <param name="completion_handler">The action to be performed on successful completion of the main action</param>
            <returns>The task generated and started by this method</returns>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew``1(System.Action{``0},``0,System.Action{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>Creates and starts a task with a parameterized state</summary>
            <typeparam name="T">The type of the parameterized state</typeparam>
            <param name="action">The main action</param>
            <param name="state">The parameterized state for the action</param>
            <param name="exception_handler">The action to be performed on encountered exception during execution of the main action</param>
            <param name="completion_handler">The action to be performed on successful completion of the main action</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew``1(System.Action{``0},``0,System.Action{System.Threading.Tasks.Task,``0},System.Action{System.Threading.Tasks.Task,``0})">
            <summary>Creates and starts a task with a parameterized state</summary>
            <typeparam name="T">The type of the parameterized state</typeparam>
            <param name="action">The main action</param>
            <param name="state">The parameterized state for the action</param>
            <param name="exception_handler">The action to be performed on encountered exception during execution of the main action</param>
            <param name="completion_handler">The action to be performed on successful completion of the main action</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew(System.Action,System.Threading.CancellationToken,System.Action{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>Creates and starts a task</summary>
            <param name="action">The main action</param>
            <param name="cancellationToken">The cancellation token for the task</param>
            <param name="exception_handler">The action to be performed on encountered exception during execution of the main action</param>
            <param name="completion_handler">The action to be performed on successful completion of the main action</param>
            <returns>The task generated and started by this method</returns>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskHandler.StartNew``1(System.Action{``0},``0,System.Threading.CancellationToken,System.Action{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>Creates and starts a task with a parameterized state</summary>
            <typeparam name="T">The type of the parameterized state</typeparam>
            <param name="action">The main action</param>
            <param name="state">The parameterized state for the action</param>
            <param name="cancellationToken">The cancellation token for the task</param>
            <param name="exception_handler">The action to be performed on encountered exception during execution of the main action</param>
            <param name="completion_handler">The action to be performed on successful completion of the main action</param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.Tasks.TaskSet">
            <summary>Defines a container for handled tasks</summary>
        </member>
        <member name="F:Primrose.Primitives.Tasks.TaskSet.Task">
            <summary>The main action</summary>
        </member>
        <member name="F:Primrose.Primitives.Tasks.TaskSet.ActionFail">
            <summary>The action to be performed on encountered exception during execution of the main action</summary>
        </member>
        <member name="F:Primrose.Primitives.Tasks.TaskSet.ActionPass">
            <summary>The action to be performed on successful completion of the main action</summary>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskSet.#ctor(System.Action,System.Action{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>Creates a container for handled tasks</summary>
        </member>
        <member name="T:Primrose.Primitives.Tasks.TaskSet`1">
            <summary>Defines a container for handled tasks</summary>
        </member>
        <member name="F:Primrose.Primitives.Tasks.TaskSet`1.Task">
            <summary>The main action</summary>
        </member>
        <member name="F:Primrose.Primitives.Tasks.TaskSet`1.ActionFail">
            <summary>The action to be performed on encountered exception during execution of the main action</summary>
        </member>
        <member name="F:Primrose.Primitives.Tasks.TaskSet`1.ActionPass">
            <summary>The action to be performed on successful completion of the main action</summary>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskSet`1.#ctor(System.Action{`0})">
            <summary>Creates a container for handled tasks</summary>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskSet`1.#ctor(System.Action{`0},System.Action{System.Threading.Tasks.Task},System.Action{System.Threading.Tasks.Task})">
            <summary>Creates a container for handled tasks</summary>
        </member>
        <member name="M:Primrose.Primitives.Tasks.TaskSet`1.#ctor(System.Action{`0},System.Action{System.Threading.Tasks.Task,`0},System.Action{System.Threading.Tasks.Task,`0})">
            <summary>Creates a container for handled tasks</summary>
        </member>
        <member name="T:Primrose.Primitives.TimeControl">
            <summary>
            Represents a time control 
            </summary>
        </member>
        <member name="T:Primrose.Primitives.TimeControl.TimePrecision">
            <summary>Sets a time precision mode</summary>
        </member>
        <member name="F:Primrose.Primitives.TimeControl.TimePrecision.NONE">
            <summary>Disables any time control. Wait() will do nothing. Intended for when you have other methods of time control and only want to measure the time</summary>
        </member>
        <member name="F:Primrose.Primitives.TimeControl.TimePrecision.SIMPLE">
            <summary>Sets a time control with low precision</summary>
        </member>
        <member name="F:Primrose.Primitives.TimeControl.TimePrecision.HIGH_PRECISION">
            <summary>Sets a time control to high precision by spinning the CPU instead of yielding it</summary>
        </member>
        <member name="F:Primrose.Primitives.TimeControl.TimePrecision.DYNAMIC">
            <summary>Sets a time control to adjust itself between simple and high precision modes</summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.#ctor">
            <summary>
            Initializes a time control
            </summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.#ctor(System.UInt32)">
            <summary>
            Initializes a time control
            </summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.#ctor(System.UInt32,Primrose.Primitives.TimeControl.TimePrecision)">
            <summary>
            Initializes a time control
            </summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.MinimumFPS">
            <summary>Defines the minimum desirable FPS for throttling purposes</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.MaximumFPS">
            <summary>Defines the maximum desirable FPS for throttling purposes</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.PerformanceSavingFPS">
            <summary>Defines the FPS where performance savings should be triggered</summary>
        </member>
        <member name="F:Primrose.Primitives.TimeControl.FPSRefreshInterval">
            <summary>The time period in which FPS is updated</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.FPS">
            <summary>The current FPS</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.SpinsInLastFrame">
            <summary>Shows the number of spinning cycles made while during the last Wait() call. Can be used to check performance</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.SpinsPerFrame">
            <summary>The current number of spin cycles per second</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.PercentWait">
            <summary>The fraction of time spent in Wait()</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.PercentMarked">
            <summary>The fraction of time spent between Mark() and Unmark()</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.PercentProcess">
            <summary>The fraction of time spent outside of Wait()</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.Precision">
            <summary>The precision mode of the timer</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.TargetFPS">
            <summary>The target FPS</summary>
        </member>
        <member name="F:Primrose.Primitives.TimeControl.SpeedModifier">
            <summary>A multiplier to world time</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.WorldTime">
            <summary>The world time</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.UpdateInterval">
            <summary>A interval between two successive updates</summary>
        </member>
        <member name="P:Primrose.Primitives.TimeControl.WorldInterval">
            <summary>The interval in world time</summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.Update">
            <summary>Updates the time</summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.AddTime(System.Single)">
            <summary>Performs a time skip to increment the time</summary>
            <param name="worldtime"></param>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.Wait">
            <summary>Performs a wait to suspend process until the target FPS is reached</summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.Mark">
            <summary>Begins measurement of two points of time</summary>
        </member>
        <member name="M:Primrose.Primitives.TimeControl.Unmark">
            <summary>Ends measurement of two points of time</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.ACondition">
            <summary>Represents a condition to be fulfilled</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.ACondition.Result">
            <summary>Gets a value indicating whether the condition is currently met</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ACondition.UpdateResult">
            <summary>Updates the result and triggers any event based on the result</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ACondition.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="E:Primrose.Primitives.Triggers.ACondition.Update">
            <summary>Occurs when the condition result is updated</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ACondition.OnUpdate(System.Boolean)">
            <summary>Raises the Update event</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ACondition.And(Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a new condition as a logical AND with another condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ACondition.Or(Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a new condition as a logical OR with another condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ACondition.Not">
            <summary>Creates a new condition as a logical negation of itself</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.AObservableValueCondition`1">
            <summary>Represents a condition to be fulfilled</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.AObservableValueCondition`1.ObservableValue">
            <summary>The ObservableValue to be matched</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.AObservableValueCondition`1.#ctor(Primrose.Primitives.Observables.ObservableValue{`0}@)">
            <summary>Creates a condition that compares an ObservableValue against a value</summary>
            <param name="observable">The ObservableValue to be matched</param>
        </member>
        <member name="T:Primrose.Primitives.Triggers.FuncCondition`1">
            <summary>Represents a condition that compares an ObservableValue against a function</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.FuncCondition`1.Func">
            <summary>The function to determine if a value satisfies the condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.FuncCondition`1.#ctor(Primrose.Primitives.Observables.ObservableValue{`0}@,System.Func{`0,System.Boolean})">
            <summary>Creates a condition that compares an ObservableValue against a value</summary>
            <param name="observable">The ObservableValue to be matched</param>
            <param name="func">The function to determine if a value satisfies the condition</param>
        </member>
        <member name="M:Primrose.Primitives.Triggers.FuncCondition`1.#ctor(System.Func{`0,System.Boolean},Primrose.Primitives.Observables.ObservableValue{`0}@)">
            <summary>Creates a condition that compares an ObservableValue against a value</summary>
            <param name="func">The function to determine if a value satisfies the condition</param>
            <param name="target">The ObservableValue to be monitored</param>
        </member>
        <member name="M:Primrose.Primitives.Triggers.FuncCondition`1.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.ICondition">
            <summary>Describes an interface for a condition</summary>
        </member>
        <member name="E:Primrose.Primitives.Triggers.ICondition.Update">
            <summary>Occurs when the condition result is updated</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.ICondition.Result">
            <summary>Gets a value indicating whether the condition is currently met</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ICondition.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ICondition.And(Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a new condition as a logical AND with another condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ICondition.Or(Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a new condition as a logical OR with another condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ICondition.Not">
            <summary>Creates a new condition as a logical negation of itself</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.LogicalAndCondition">
            <summary>Represents a condition from the logical AND of two conditions</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.LogicalAndCondition.#ctor(Primrose.Primitives.Triggers.ICondition,Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a condition from the logical AND of two conditions</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.LogicalAndCondition.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.LogicalNotCondition">
            <summary>Represents a condition from the logical negation of another condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.LogicalNotCondition.#ctor(Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a condition from the logical negation of another condition</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.LogicalNotCondition.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.LogicalOrCondition">
            <summary>Represents a condition from the logical OR of two conditions</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.LogicalOrCondition.#ctor(Primrose.Primitives.Triggers.ICondition,Primrose.Primitives.Triggers.ICondition)">
            <summary>Creates a condition from the logical OR of two conditions</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.LogicalOrCondition.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.ObservableCompareCondition`1">
            <summary>Represents a condition that compares two ObservableValues</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.ObservableCompareCondition`1.ObservableValue2">
            <summary>The value to be matched against</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.ObservableCompareCondition`1.Type">
            <summary>The comparison type</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ObservableCompareCondition`1.#ctor(Primrose.Primitives.Observables.ObservableValue{`0}@,Primrose.Primitives.Observables.ObservableValue{`0}@,Primrose.Primitives.Triggers.MatchType)">
            <summary>Creates a condition that compares an ObservableValue against a value</summary>
            <param name="observable">The ObservableValue to be matched</param>
            <param name="type">The comparison type</param>
            <param name="observable2">The second ObservableValue to be matched</param>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ObservableCompareCondition`1.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.ValueCondition`1">
            <summary>Represents a condition that compares an ObservableValue against a value</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.ValueCondition`1.MatchValue">
            <summary>The value to be matched against</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.ValueCondition`1.Type">
            <summary>The comparison type</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ValueCondition`1.#ctor(Primrose.Primitives.Observables.ObservableValue{`0}@,Primrose.Primitives.Triggers.MatchType,`0)">
            <summary>Creates a condition that compares an ObservableValue against a value</summary>
            <param name="observable">The ObservableValue to be matched</param>
            <param name="type">The comparison type</param>
            <param name="value">The value to be matched</param>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ValueCondition`1.Evaluate">
            <summary>Evaluates the condition</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.ConditionUpdateEventHandler">
            <summary>An event delegate for handling condition updates</summary>
            <param name="args"></param>
        </member>
        <member name="T:Primrose.Primitives.Triggers.ConditionUpdateEventArgs">
            <summary>Represents a condition update</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.ConditionUpdateEventArgs.Condition">
            <summary>The condition being updated</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.ConditionUpdateEventArgs.Fulfilled">
            <summary>Indicates whether the condition is currently met</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.ConditionUpdateEventArgs.#ctor(Primrose.Primitives.Triggers.ICondition,System.Boolean)">
            <summary>Represents a condition update</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.MatchType">
            <summary>
            Provides a listing of comparison options
            </summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.EQUALS">
            <summary>Matches if two objects are equal</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.NOT_EQUALS">
            <summary>Matches if two objects are not equal</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.SAME_TYPE">
            <summary>Matches if two objects have the same type</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.NUMERIC_EQUALS">
            <summary>Matches if two objects are comparable and are equal</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.NUMERIC_NOT_EQUALS">
            <summary>Matches if two objects are comparable and are not equal</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.LESS_THAN">
            <summary>Matches if two objects are comparable and the first element precedes the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.MORE_THAN">
            <summary>Matches if two objects are comparable and the first element succeeds the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.LESS_THAN_OR_EQUAL_TO">
            <summary>Matches if two objects are comparable and the first element precedes or equals the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.MORE_THAN_OR_EQUAL_TO">
            <summary>Matches if two objects are comparable and the first element succeeds or equals the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.SAME_LENGTH">
            <summary>Matches if two objects are strings and have the same length</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.LENGTH_SHORTER_THAN">
            <summary>Matches if two objects are strings and the first element has a character length shorter than the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.LENGTH_LONGER_THAN">
            <summary>Matches if two objects are strings and the first element has a character length longer than the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.LENGTH_SHORTER_THAN_OR_EQUAL_TO">
            <summary>Matches if two objects are strings and the first element has a character length shorter than or equal to the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.LENGTH_LONGER_THAN_OR_EQUAL_TO">
            <summary>Matches if two objects are strings and the first element has a character length shorter than or equal to the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.CONTAINS">
            <summary>Matches if two objects are strings and the first element contains the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.IS_CONTAINED_BY">
            <summary>Matches if two objects are strings and the second element contains the first</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.STARTS_WITH">
            <summary>Matches if two objects are strings and the first element starts with the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.ENDS_WITH">
            <summary>Matches if two objects are strings and the first element ends with the second</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.CASE_INSENSITIVE_CONTAINS">
            <summary>Matches if two objects are strings and the first element contains the second, disregarding character case</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.CASE_INSENSITIVE_IS_CONTAINED_BY">
            <summary>Matches if two objects are strings and the second element contains the first, disregarding character case</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.CASE_INSENSITIVE_STARTS_WITH">
            <summary>Matches if two objects are strings and the first element starts with the second, disregarding character case</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.MatchType.CASE_INSENSITIVE_ENDS_WITH">
            <summary>Matches if two objects are strings and the first element ends with the second, disregarding character case</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.Trigger">
            <summary>Represents a trigger for performing actions when a condition is fulfilled</summary>
        </member>
        <member name="F:Primrose.Primitives.Triggers.Trigger.Actions">
            <summary>The collection of actions to be performed by the trigger</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.Trigger.#ctor(Primrose.Primitives.Triggers.ICondition,System.Action[])">
            <summary>Creates a trigger for performing actions when a condition is fulfilled</summary>
        </member>
        <member name="P:Primrose.Primitives.Triggers.Trigger.Condition">
            <summary>The condition checked by the trigger</summary>
        </member>
        <member name="T:Primrose.Primitives.Triggers.Trigger.ActionCollection">
            <summary>Represents a collection of actions to be performed by the trigger</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.Trigger.ActionCollection.Add(System.Action)">
            <summary>Adds an action to the trigger</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.Trigger.ActionCollection.AddRange(System.Action[])">
            <summary>Adds an action to the trigger</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.Trigger.ActionCollection.Remove(System.Action)">
            <summary>Removes an action from the trigger</summary>
        </member>
        <member name="M:Primrose.Primitives.Triggers.Trigger.ActionCollection.Clear">
            <summary>Clears all actions from the trigger</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float2box">
            <summary>Represents an axis-aligned bounding box on two float dimensions</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float2box.LowerBound">
            <summary>The coordinates of the lower bound</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float2box.UpperBound">
            <summary>The coordinates of the upper bound</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.#ctor(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Creates a float2box value
            </summary>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.Equals(Primrose.Primitives.ValueTypes.float2box)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.op_Equality(Primrose.Primitives.ValueTypes.float2box,Primrose.Primitives.ValueTypes.float2box)">
            <summary>Determines if two float2box values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.op_Inequality(Primrose.Primitives.ValueTypes.float2box,Primrose.Primitives.ValueTypes.float2box)">
            <summary>Determines if two float2box values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2box.Size">
            <summary>Returns the size of the bounding box</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2box.Center">
            <summary>Returns the center coordinate of the bounding box</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2box.Radius">
            <summary>Returns the equivalent bounding radius</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.AddPoint(Primrose.Primitives.ValueTypes.float2)">
            <summary>Returns a new bounding box that includes the given point</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.AddBox(Primrose.Primitives.ValueTypes.float2box)">
            <summary>Returns a new bounding box that includes the given box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.ClampPoint(Primrose.Primitives.ValueTypes.float2)">
            <summary>Returns a point clamped within the bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.Transform(Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a transfromation on the bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.Translate(Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a translation transfromation on the bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2box.ContainsPoint(Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float2obox">
            <summary>Represents a transformed bounding box on two float dimensions</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float2obox.Box">
            <summary>The axis-aligned bounding box prior to transformation</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float2obox.Transform">
            <summary>The transformation matrix applied to the box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.#ctor(Primrose.Primitives.ValueTypes.float2box,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>
            Creates a float2obox value
            </summary>
            <param name="box"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.Equals(Primrose.Primitives.ValueTypes.float2obox)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.op_Equality(Primrose.Primitives.ValueTypes.float2obox,Primrose.Primitives.ValueTypes.float2obox)">
            <summary>Determines if two float2obox values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.op_Inequality(Primrose.Primitives.ValueTypes.float2obox,Primrose.Primitives.ValueTypes.float2obox)">
            <summary>Determines if two float2obox values are not equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.ContainsPoint(Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2obox.Intersects(Primrose.Primitives.ValueTypes.float2ray)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float2ray">
            <summary>Represents a ray on two float dimensions</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2ray.Origin">
            <summary>The coordinates of the origin</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2ray.Direction">
            <summary>The coordinates of the Direction</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.#ctor(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Creates a float2ray value
            </summary>
            <param name="origin"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.Equals(Primrose.Primitives.ValueTypes.float2ray)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.op_Equality(Primrose.Primitives.ValueTypes.float2ray,Primrose.Primitives.ValueTypes.float2ray)">
            <summary>Determines if two float2ray values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.op_Inequality(Primrose.Primitives.ValueTypes.float2ray,Primrose.Primitives.ValueTypes.float2ray)">
            <summary>Determines if two float2ray values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2ray.Vector">
            <summary>Returns the vector of the ray</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2ray.Length">
            <summary>Returns the length of the ray</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.Intersects(Primrose.Primitives.ValueTypes.float2box)">
            <summary>Returns whether the ray intersects with a bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2ray.Intersects(Primrose.Primitives.ValueTypes.float2obox)">
            <summary>Returns whether the ray intersects with a bounding box</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3box">
            <summary>Represents an axis-aligned bounding box on three float dimensions</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3box.LowerBound">
            <summary>The coordinates of the lower bound</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3box.UpperBound">
            <summary>The coordinates of the upper bound</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.#ctor(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Creates a float3box value
            </summary>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.Equals(Primrose.Primitives.ValueTypes.float3box)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.op_Equality(Primrose.Primitives.ValueTypes.float3box,Primrose.Primitives.ValueTypes.float3box)">
            <summary>Determines if two float3box values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.op_Inequality(Primrose.Primitives.ValueTypes.float3box,Primrose.Primitives.ValueTypes.float3box)">
            <summary>Determines if two float3box values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3box.Size">
            <summary>Returns the size of the bounding box</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3box.Center">
            <summary>Returns the center coordinate of the bounding box</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3box.Radius">
            <summary>Returns the equivalent bounding radius</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.AddPoint(Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns a new bounding box that includes the given point</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.AddBox(Primrose.Primitives.ValueTypes.float3box)">
            <summary>Returns a new bounding box that includes the given box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.ClampPoint(Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns a point clamped within the bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.Transform(Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a transfromation on the bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.Translate(Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a translation transfromation on the bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3box.ContainsPoint(Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3obox">
            <summary>Represents a transformed bounding box on three float dimensions</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3obox.Box">
            <summary>The axis-aligned bounding box prior to transformation</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3obox.Transform">
            <summary>The transformation matrix applied to the box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.#ctor(Primrose.Primitives.ValueTypes.float3box,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>
            Creates a float3obox value
            </summary>
            <param name="box"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.Equals(Primrose.Primitives.ValueTypes.float3obox)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.op_Equality(Primrose.Primitives.ValueTypes.float3obox,Primrose.Primitives.ValueTypes.float3obox)">
            <summary>Determines if two float3obox values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.op_Inequality(Primrose.Primitives.ValueTypes.float3obox,Primrose.Primitives.ValueTypes.float3obox)">
            <summary>Determines if two float3obox values are not equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.ContainsPoint(Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3obox.Intersects(Primrose.Primitives.ValueTypes.float3ray)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3plane">
            <summary>Represents a plane surface on three float dimensions</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3plane.PlaneSide">
            <summary>Denotes the side of a plane, used as a return value for intersection evaluations</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3plane.PlaneSide.Negative">
            <summary>Represents the back side of a plane</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3plane.PlaneSide.Positive">
            <summary>Represents the front side of a plane</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3plane.PlaneSide.Both">
            <summary>Represents both sides of a plane</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3plane.D">
            <summary>The distance of the plane from the origin</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3plane.Normal">
            <summary>The normal vector of the plane</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.#ctor(System.Single,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Creates a float3plane value
            </summary>
            <param name="d"></param>
            <param name="normal"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.#ctor(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Creates a float3plane value
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a float3plane value
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.Equals(Primrose.Primitives.ValueTypes.float3plane)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.op_Equality(Primrose.Primitives.ValueTypes.float3plane,Primrose.Primitives.ValueTypes.float3plane)">
            <summary>Determines if two float3plane values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.op_Inequality(Primrose.Primitives.ValueTypes.float3plane,Primrose.Primitives.ValueTypes.float3plane)">
            <summary>Determines if two float3plane values are not equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.Intersects(Primrose.Primitives.ValueTypes.float3box)">
            <summary>Determines if the plane intersects an axis-aligned bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3plane.DistanceFromPoint(Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines the normal distance of a point from the plane</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3ray">
            <summary>Represents a ray on three float dimensions</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3ray.Origin">
            <summary>The coordinates of the origin</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3ray.Direction">
            <summary>The direction vector</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.#ctor(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Creates a float3ray value
            </summary>
            <param name="origin"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.Equals(Primrose.Primitives.ValueTypes.float3ray)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.op_Equality(Primrose.Primitives.ValueTypes.float3ray,Primrose.Primitives.ValueTypes.float3ray)">
            <summary>Determines if two float3ray values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.op_Inequality(Primrose.Primitives.ValueTypes.float3ray,Primrose.Primitives.ValueTypes.float3ray)">
            <summary>Determines if two float3ray values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3ray.Vector">
            <summary>Returns the vector of the ray</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3ray.Length">
            <summary>Returns the length of the ray</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.Intersects(Primrose.Primitives.ValueTypes.float3box)">
            <summary>Returns whether the ray intersects with a bounding box</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3ray.Intersects(Primrose.Primitives.ValueTypes.float3obox)">
            <summary>Returns whether the ray intersects with a bounding box</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.Pair`2">
            <summary>
            A value pair
            </summary>
            <typeparam name="T">The type of the first value</typeparam>
            <typeparam name="U">The type of the second value</typeparam>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Pair`2.t">
            <summary>The first value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Pair`2.u">
            <summary>The second value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.#ctor(`0,`1)">
            <summary>
            Creates a value pair with given values
            </summary>
            <param name="t">The first value</param>
            <param name="u">The second value</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.Equals(Primrose.Primitives.ValueTypes.Pair{`0,`1})">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.op_Equality(Primrose.Primitives.ValueTypes.Pair{`0,`1},Primrose.Primitives.ValueTypes.Pair{`0,`1})">
            <summary>Determines if two short3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.op_Inequality(Primrose.Primitives.ValueTypes.Pair{`0,`1},Primrose.Primitives.ValueTypes.Pair{`0,`1})">
            <summary>Determines if two short3 values are not equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Pair`2.ToString">
            <summary>Provides a string representation of this value</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.Quad`4">
            <summary>
            A value quad
            </summary>
            <typeparam name="T">The type of the first value</typeparam>
            <typeparam name="U">The type of the second value</typeparam>
            <typeparam name="V">The type of the third value</typeparam>
            <typeparam name="W">The type of the fourth value</typeparam>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Quad`4.t">
            <summary>The first value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Quad`4.u">
            <summary>The second value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Quad`4.v">
            <summary>The third value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Quad`4.w">
            <summary>The fourth value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Creates a value triple with given values
            </summary>
            <param name="t">The first value</param>
            <param name="u">The second value</param>
            <param name="v">The third value</param>
            <param name="w">The fourth value</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.Equals(Primrose.Primitives.ValueTypes.Quad{`0,`1,`2,`3})">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.op_Equality(Primrose.Primitives.ValueTypes.Quad{`0,`1,`2,`3},Primrose.Primitives.ValueTypes.Quad{`0,`1,`2,`3})">
            <summary>Determines if two short3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.op_Inequality(Primrose.Primitives.ValueTypes.Quad{`0,`1,`2,`3},Primrose.Primitives.ValueTypes.Quad{`0,`1,`2,`3})">
            <summary>Determines if two short3 values are not equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Quad`4.ToString">
            <summary>Provides a string representation of this value</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.Trip`3">
            <summary>
            A value triple
            </summary>
            <typeparam name="T">The type of the first value</typeparam>
            <typeparam name="U">The type of the second value</typeparam>
            <typeparam name="V">The type of the third value</typeparam>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Trip`3.t">
            <summary>The first value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Trip`3.u">
            <summary>The second value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.Trip`3.v">
            <summary>The third value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a value triple with given values
            </summary>
            <param name="t">The first value</param>
            <param name="u">The second value</param>
            <param name="v">The third value</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.Equals(Primrose.Primitives.ValueTypes.Trip{`0,`1,`2})">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.op_Equality(Primrose.Primitives.ValueTypes.Trip{`0,`1,`2},Primrose.Primitives.ValueTypes.Trip{`0,`1,`2})">
            <summary>Determines if two short3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.op_Inequality(Primrose.Primitives.ValueTypes.Trip{`0,`1,`2},Primrose.Primitives.ValueTypes.Trip{`0,`1,`2})">
            <summary>Determines if two short3 values are not equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.Trip`3.ToString">
            <summary>Provides a string representation of this value</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.byte2">
            <summary>A byte2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a byte2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.byte2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.ToArray">
            <summary>Creates a byte[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.FromArray(System.Byte[])">
            <summary>Creates a byte2 from an array</summary>
            <param name="array">The array</param>
            <returns>A byte2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a byte2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.Parse(System.String)">
            <summary>Parses a byte2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A byte2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.byte2)">
            <summary>Parses a byte2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A byte2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.TryParse(System.String,Primrose.Primitives.ValueTypes.byte2@)">
            <summary>Parses a byte2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.TryParse(System.String,Primrose.Primitives.ValueTypes.byte2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.byte2)">
            <summary>Parses a byte2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.Equals(Primrose.Primitives.ValueTypes.byte2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.op_Equality(Primrose.Primitives.ValueTypes.byte2,Primrose.Primitives.ValueTypes.byte2)">
            <summary>Determines if two byte2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.op_Inequality(Primrose.Primitives.ValueTypes.byte2,Primrose.Primitives.ValueTypes.byte2)">
            <summary>Determines if two byte2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.byte2.Empty">
            <summary>Returns a byte2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.op_Explicit(Primrose.Primitives.ValueTypes.byte2)~System.Byte[]">
            <summary>Creates a byte[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte2.op_Explicit(System.Byte[])~Primrose.Primitives.ValueTypes.byte2">
            <summary>Creates a byte2 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.byte3">
            <summary>A byte3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a byte3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.byte3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.ToArray">
            <summary>Creates a byte[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.FromArray(System.Byte[])">
            <summary>Creates a byte3 from an array</summary>
            <param name="array">The array</param>
            <returns>A byte3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a byte3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.Parse(System.String)">
            <summary>Parses a byte3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A byte3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.byte3)">
            <summary>Parses a byte3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A byte3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.TryParse(System.String,Primrose.Primitives.ValueTypes.byte3@)">
            <summary>Parses a byte3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.TryParse(System.String,Primrose.Primitives.ValueTypes.byte3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.byte3)">
            <summary>Parses a byte3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.Equals(Primrose.Primitives.ValueTypes.byte3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.op_Equality(Primrose.Primitives.ValueTypes.byte3,Primrose.Primitives.ValueTypes.byte3)">
            <summary>Determines if two byte3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.op_Inequality(Primrose.Primitives.ValueTypes.byte3,Primrose.Primitives.ValueTypes.byte3)">
            <summary>Determines if two byte3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.byte3.Empty">
            <summary>Returns a byte3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.op_Explicit(Primrose.Primitives.ValueTypes.byte3)~System.Byte[]">
            <summary>Creates a byte[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte3.op_Explicit(System.Byte[])~Primrose.Primitives.ValueTypes.byte3">
            <summary>Creates a byte3 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.byte4">
            <summary>A byte4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.byte4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a byte4 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.byte4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.ToArray">
            <summary>Creates a byte[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.FromArray(System.Byte[])">
            <summary>Creates a byte4 from an array</summary>
            <param name="array">The array</param>
            <returns>A byte4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a byte4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.Parse(System.String)">
            <summary>Parses a byte4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A byte4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.byte4)">
            <summary>Parses a byte4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A byte4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.TryParse(System.String,Primrose.Primitives.ValueTypes.byte4@)">
            <summary>Parses a byte4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.TryParse(System.String,Primrose.Primitives.ValueTypes.byte4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.byte4)">
            <summary>Parses a byte4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.Equals(Primrose.Primitives.ValueTypes.byte4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.op_Equality(Primrose.Primitives.ValueTypes.byte4,Primrose.Primitives.ValueTypes.byte4)">
            <summary>Determines if two byte4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.op_Inequality(Primrose.Primitives.ValueTypes.byte4,Primrose.Primitives.ValueTypes.byte4)">
            <summary>Determines if two byte4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.byte4.Empty">
            <summary>Returns a byte4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.op_Explicit(Primrose.Primitives.ValueTypes.byte4)~System.Byte[]">
            <summary>Creates a byte[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.byte4.op_Explicit(System.Byte[])~Primrose.Primitives.ValueTypes.byte4">
            <summary>Creates a byte4 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float2">
            <summary>A float2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.#ctor(System.Single,System.Single)">
            <summary>
            Creates a float2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.ToArray">
            <summary>Creates a float[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.FromArray(System.Single[])">
            <summary>Creates a float2 from an array</summary>
            <param name="array">The array</param>
            <returns>A float2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a float2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.FromArray(System.Int32[])">
            <summary>Creates a float2 from an array</summary>
            <param name="array">The array</param>
            <returns>A float2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a float2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Parse(System.String)">
            <summary>Parses a float2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A float2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float2)">
            <summary>Parses a float2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A float2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.TryParse(System.String,Primrose.Primitives.ValueTypes.float2@)">
            <summary>Parses a float2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.TryParse(System.String,Primrose.Primitives.ValueTypes.float2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float2)">
            <summary>Parses a float2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_UnaryNegation(Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a memberwise negation of a float2 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Addition(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs an addition operation between two float2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Subtraction(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a subtraction operation between two float2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Multiply(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a memberwise multiplication operation between two float2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Division(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a memberwise division between two float2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Multiply(System.Single,Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a multiplication operation between a float2 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Multiply(Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>Performs a multiplication operation between a float2 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Division(Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>Performs a division operation between a float2 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Modulus(Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>Performs a modulus operation between a float2 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Diff(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Returns the absolute difference between two float2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Equals(Primrose.Primitives.ValueTypes.float2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Explicit(Primrose.Primitives.ValueTypes.float2)~Primrose.Primitives.ValueTypes.int2">
            <summary>Casts a float2 to int2</summary>
            <param name="o">The object to cast</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Equality(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines if two float2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Inequality(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines if two float2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.Empty">
            <summary>Returns a float2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Explicit(Primrose.Primitives.ValueTypes.float2)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Explicit(Primrose.Primitives.ValueTypes.float2)~System.Single[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Implicit(System.Single[])~Primrose.Primitives.ValueTypes.float2">
            <summary>Creates a float2 value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.float2">
            <summary>Creates a float2 value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.op_Implicit(Primrose.Primitives.ValueTypes.int2)~Primrose.Primitives.ValueTypes.float2">
            <summary>Converts a int2 value to a float2 value</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.One">
            <summary>Returns a float2 value with all elements set to 1</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.UnitX">
            <summary>Returns a float2 value representing a unit vector in the x direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.UnitY">
            <summary>Returns a float2 value representing a unit vector in the y direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.Length">
            <summary>Calculates the length, or Euclidean distance, of the vector</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float2.LengthSquared">
            <summary>Calculates the length, or Euclidean distance, of the vector squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Distance(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Calculates the Euclidean distance, between two vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.DistanceSquared(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Calculates the Euclidean distance, between two vectors squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Normalize">
            <summary>Returns a float2 value of the same direction, normalized to unit length</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Dot(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Calculates the dot product between to float2 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Dot(Primrose.Primitives.ValueTypes.float2)">
            <summary>Calculates the dot product between to float2 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Cross(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Calculates the cross product between to float2 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Cross(Primrose.Primitives.ValueTypes.float2)">
            <summary>Calculates the cross product between to float2 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Swap(Primrose.Primitives.ValueTypes.float2@,Primrose.Primitives.ValueTypes.float2@)">
            <summary>Swaps two float2 values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Swap(Primrose.Primitives.ValueTypes.float2@)">
            <summary>Swaps two float2 values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Reflect(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines the reflect vector of the given vector and normal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Reflect(Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines the reflect vector of the given vector and normal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Lerp(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Lerp(Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Lerp(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Lerp(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Max(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a float2 value with each component being the greater of two float2 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Max(Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a float2 value with each component being the greater of two float2 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Min(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a float2 value with each component being the lesser of two float2 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Min(Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a float2 value with each component being the lesser of two float2 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Creep(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta for each dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Creep(Primrose.Primitives.ValueTypes.float2,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta for each dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Creep(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta per dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Creep(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta per dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Modulus(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="value">The input value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float2.Modulus(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3">
            <summary>A float3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a float3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.ToArray">
            <summary>Creates a float[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.FromArray(System.Single[])">
            <summary>Creates a float3 from an array</summary>
            <param name="array">The array</param>
            <returns>A float3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a float3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.FromArray(System.Int32[])">
            <summary>Creates a float3 from an array</summary>
            <param name="array">The array</param>
            <returns>A float3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a float3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Parse(System.String)">
            <summary>Parses a float3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A float3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float3)">
            <summary>Parses a float3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A float3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.TryParse(System.String,Primrose.Primitives.ValueTypes.float3@)">
            <summary>Parses a float3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.TryParse(System.String,Primrose.Primitives.ValueTypes.float3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float3)">
            <summary>Parses a float3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_UnaryNegation(Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a memberwise negation of a float3 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Addition(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs an addition operation between two float3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Subtraction(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a subtraction operation between two float3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Multiply(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a memberwise multiplication operation between two float3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Division(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a memberwise division between two float3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Multiply(System.Single,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a multiplication operation between a float3 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Multiply(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>Performs a multiplication operation between a float3 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Division(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>Performs a division operation between a float3 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Modulus(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>Performs a modulus operation between a float3 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Diff(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns the absolute difference between two float3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Equals(Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Explicit(Primrose.Primitives.ValueTypes.float3)~Primrose.Primitives.ValueTypes.int3">
            <summary>Casts a float3 to int3</summary>
            <param name="o">The object to cast</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Equality(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines if two float3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Inequality(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines if two float3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.Empty">
            <summary>Returns a float3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Explicit(Primrose.Primitives.ValueTypes.float3)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Explicit(Primrose.Primitives.ValueTypes.float3)~System.Single[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Implicit(System.Single[])~Primrose.Primitives.ValueTypes.float3">
            <summary>Creates a float3 value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.float3">
            <summary>Creates a float3 value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.op_Implicit(Primrose.Primitives.ValueTypes.int3)~Primrose.Primitives.ValueTypes.float3">
            <summary>Converts a int3 value to a float3 value</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.One">
            <summary>Returns a float3 value with all elements set to 1</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.UnitX">
            <summary>Returns a float3 value representing a unit vector in the x direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.UnitY">
            <summary>Returns a float3 value representing a unit vector in the y direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.UnitZ">
            <summary>Returns a float3 value representing a unit vector in the y direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.Length">
            <summary>Calculates the length, or Euclidean distance, of the vector</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3.LengthSquared">
            <summary>Calculates the length, or Euclidean distance, of the vector squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Distance(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Calculates the Euclidean distance, between two vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.DistanceSquared(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Calculates the Euclidean distance, between two vectors squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Normalize">
            <summary>Returns a float3 value of the same direction, normalized to unit length</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Dot(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Calculates the dot product between to float3 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Dot(Primrose.Primitives.ValueTypes.float3)">
            <summary>Calculates the dot product between to float3 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Cross(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Calculates the cross product between to float3 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Cross(Primrose.Primitives.ValueTypes.float3)">
            <summary>Calculates the cross product between to float3 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Swap(Primrose.Primitives.ValueTypes.float3@,Primrose.Primitives.ValueTypes.float3@)">
            <summary>Swaps two float3 values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Swap(Primrose.Primitives.ValueTypes.float3@)">
            <summary>Swaps two float3 values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Reflect(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines the reflect vector of the given vector and normal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Reflect(Primrose.Primitives.ValueTypes.float3)">
            <summary>Determines the reflect vector of the given vector and normal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Lerp(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Lerp(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Lerp(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Lerp(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Max(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a float3 value with each component being the greater of two float3 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Max(Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a float3 value with each component being the greater of two float3 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Min(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a float3 value with each component being the lesser of two float3 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Min(Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a float3 value with each component being the lesser of two float3 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Creep(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta for each dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Creep(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta for each dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Creep(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta per dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Creep(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta per dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Modulus(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="value">The input value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3.Modulus(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float3x3">
            <summary>A float3x3 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3x3.row0">
            <summary>The value of the first row, as a float3</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3x3.row1">
            <summary>The value of the second row, as a float3</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float3x3.row2">
            <summary>The value of the third row, as a float3</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.#ctor(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>
            Creates a float3x3 value
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <param name="r3"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3x3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.ToArray">
            <summary>Creates a float3[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.FromArray(Primrose.Primitives.ValueTypes.float3[])">
            <summary>Creates a float3x3 from an array</summary>
            <param name="array">The array</param>
            <returns>A float3x3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a float3x3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Parse(System.String)">
            <summary>Parses a float3x3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A float3x3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Parses a float3x3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A float3x3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.TryParse(System.String,Primrose.Primitives.ValueTypes.float3x3@)">
            <summary>Parses a float3x3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.TryParse(System.String,Primrose.Primitives.ValueTypes.float3x3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Parses a float3x3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_UnaryNegation(Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a memberwise negation of a float3x3 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Addition(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs an addition operation between two float3x3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Subtraction(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a subtraction operation between two float3x3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a product operation between two float3x3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(System.Single,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a multiplication operation between a float3x3 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(Primrose.Primitives.ValueTypes.float3x3,System.Single)">
            <summary>Performs a multiplication operation between a float3x3 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Division(Primrose.Primitives.ValueTypes.float3x3,System.Single)">
            <summary>Performs a division operation between a float3x3 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Modulus(Primrose.Primitives.ValueTypes.float3x3,System.Single)">
            <summary>Performs a modulus operation between a float3x3 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float2)">
            <summary>Performs a transformation of a float2 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a transformation of a float2 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>  
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a transformation of a float3 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>  
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Multiply(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Performs a transformation of a float3 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>  
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Diff(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Returns the absolute difference between two float3x3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Equals(Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Equality(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Determines if two float3x3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Inequality(Primrose.Primitives.ValueTypes.float3x3,Primrose.Primitives.ValueTypes.float3x3)">
            <summary>Determines if two float3x3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3x3.Empty">
            <summary>Returns a float3x3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Explicit(Primrose.Primitives.ValueTypes.float3x3)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Explicit(Primrose.Primitives.ValueTypes.float3x3)~Primrose.Primitives.ValueTypes.float3[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.op_Implicit(Primrose.Primitives.ValueTypes.float3[])~Primrose.Primitives.ValueTypes.float3x3">
            <summary>Creates a float3x3 value from this array</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float3x3.Identity">
            <summary>Returns a float3x3 value representing the identity transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.CreateTranslation(Primrose.Primitives.ValueTypes.float2)">
            <summary>Returns a float3x3 value representing a translation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.CreateRotation(System.Single)">
            <summary>Returns a float3x3 value representing a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.CreateScaling(Primrose.Primitives.ValueTypes.float2)">
            <summary>Returns a float3x3 value representing a scale transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Transpose">
            <summary>Returns a float3x3 value representing a transposition of a matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float3x3.Inverse">
            <summary>Returns a float3x3 value representing a inverse transformation of a matrix</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float4">
            <summary>A float4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a float4 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.ToArray">
            <summary>Creates a float[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.FromArray(System.Single[])">
            <summary>Creates a float4 from an array</summary>
            <param name="array">The array</param>
            <returns>A float4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a float4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.FromArray(System.Int32[])">
            <summary>Creates a float4 from an array</summary>
            <param name="array">The array</param>
            <returns>A float4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a float4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Parse(System.String)">
            <summary>Parses a float4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A float4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float4)">
            <summary>Parses a float4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A float4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.TryParse(System.String,Primrose.Primitives.ValueTypes.float4@)">
            <summary>Parses a float4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.TryParse(System.String,Primrose.Primitives.ValueTypes.float4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float4)">
            <summary>Parses a float4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_UnaryNegation(Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs a memberwise negation of a float4 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Addition(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs an addition operation between two float4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Subtraction(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs a subtraction operation between two float4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Multiply(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs a memberwise multiplication operation between two float4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Division(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs a memberwise division between two float4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Multiply(System.Single,Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs a multiplication operation between a float4 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Multiply(Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>Performs a multiplication operation between a float4 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Division(Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>Performs a division operation between a float4 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Modulus(Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>Performs a modulus operation between a float4 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Diff(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Returns the absolute difference between two float4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Equals(Primrose.Primitives.ValueTypes.float4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Explicit(Primrose.Primitives.ValueTypes.float4)~Primrose.Primitives.ValueTypes.int4">
            <summary>Casts a float4 to int4</summary>
            <param name="o">The object to cast</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Equality(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Determines if two float4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Inequality(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Determines if two float4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.Empty">
            <summary>Returns a float4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Explicit(Primrose.Primitives.ValueTypes.float4)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Explicit(Primrose.Primitives.ValueTypes.float4)~System.Single[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Implicit(System.Single[])~Primrose.Primitives.ValueTypes.float4">
            <summary>Creates a float4 value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.float4">
            <summary>Creates a float4 value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.op_Implicit(Primrose.Primitives.ValueTypes.int4)~Primrose.Primitives.ValueTypes.float4">
            <summary>Converts a int4 value to a float4 value</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.One">
            <summary>Returns a float4 value with all elements set to 1</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.UnitX">
            <summary>Returns a float4 value representing a unit vector in the x direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.UnitY">
            <summary>Returns a float4 value representing a unit vector in the y direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.UnitZ">
            <summary>Returns a float4 value representing a unit vector in the y direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.UnitW">
            <summary>Returns a float4 value representing a unit vector in the y direction</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.Length">
            <summary>Calculates the length, or Euclidean distance, of the vector</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4.LengthSquared">
            <summary>Calculates the length, or Euclidean distance, of the vector squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Distance(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Calculates the Euclidean distance, between two vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.DistanceSquared(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Calculates the Euclidean distance, between two vectors squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Normalize">
            <summary>Returns a float4 value of the same direction, normalized to unit length</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Dot(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Calculates the dot product between to float4 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Dot(Primrose.Primitives.ValueTypes.float4)">
            <summary>Calculates the dot product between to float4 vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Swap(Primrose.Primitives.ValueTypes.float4@,Primrose.Primitives.ValueTypes.float4@)">
            <summary>Swaps two float4 values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Swap(Primrose.Primitives.ValueTypes.float4@)">
            <summary>Swaps two float4 values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Reflect(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Determines the reflect vector of the given vector and normal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Reflect(Primrose.Primitives.ValueTypes.float4)">
            <summary>Determines the reflect vector of the given vector and normal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Lerp(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Lerp(Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Lerp(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Lerp(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Max(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a float4 value with each component being the greater of two float4 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Max(Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a float4 value with each component being the greater of two float4 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Min(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a float4 value with each component being the lesser of two float4 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Min(Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a float4 value with each component being the lesser of two float4 values
            </summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Creep(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta for each dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Creep(Primrose.Primitives.ValueTypes.float4,System.Single)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta for each dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Creep(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta per dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Creep(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns a value at most max_delta value closer to a target
            </summary>
            <param name="target">The target value</param>
            <param name="max_delta">The max_delta per dimension</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Modulus(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="value">The input value</param>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4.Modulus(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Returns the result of (value % (max - min)), scaled so that lies between min and max
            </summary>
            <param name="min">The minimum value</param>
            <param name="max">The maximum value</param>
            <returns>(value % (max - min)), scaled so that lies between min and max</returns>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.float4x4">
            <summary>A float4x4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4x4.row0">
            <summary>The value of the first row, as a float4</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4x4.row1">
            <summary>The value of the second row, as a float4</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4x4.row2">
            <summary>The value of the third row, as a float4</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.float4x4.row3">
            <summary>The value of the last row, as a float4</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.#ctor(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4)">
            <summary>
            Creates a float4x4 value
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <param name="r3"></param>
            <param name="r4"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4x4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.ToArray">
            <summary>Creates a float4[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.FromArray(Primrose.Primitives.ValueTypes.float4[])">
            <summary>Creates a float4x4 from an array</summary>
            <param name="array">The array</param>
            <returns>A float4x4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a float4x4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Parse(System.String)">
            <summary>Parses a float4x4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A float4x4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Parses a float4x4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A float4x4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.TryParse(System.String,Primrose.Primitives.ValueTypes.float4x4@)">
            <summary>Parses a float4x4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.TryParse(System.String,Primrose.Primitives.ValueTypes.float4x4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Parses a float4x4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_UnaryNegation(Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a memberwise negation of a float4x4 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Addition(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs an addition operation between two float4x4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Subtraction(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a subtraction operation between two float4x4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a product operation between two float4x4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(System.Single,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a multiplication operation between a float4x4 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(Primrose.Primitives.ValueTypes.float4x4,System.Single)">
            <summary>Performs a multiplication operation between a float4x4 value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Division(Primrose.Primitives.ValueTypes.float4x4,System.Single)">
            <summary>Performs a division operation between a float4x4 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Modulus(Primrose.Primitives.ValueTypes.float4x4,System.Single)">
            <summary>Performs a modulus operation between a float4x4 value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a transformation of a float3 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a transformation of a float3 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4)">
            <summary>Performs a transformation of a float4 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Multiply(Primrose.Primitives.ValueTypes.float4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Performs a transformation of a float4 vector</summary>
            <param name="a">The transformation matrix</param>
            <param name="v">The vector</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Diff(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Returns the absolute difference between two float4x4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Equals(Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Equality(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Determines if two float4x4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Inequality(Primrose.Primitives.ValueTypes.float4x4,Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Determines if two float4x4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4x4.Empty">
            <summary>Returns a float4x4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Explicit(Primrose.Primitives.ValueTypes.float4x4)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Explicit(Primrose.Primitives.ValueTypes.float4x4)~Primrose.Primitives.ValueTypes.float4[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.op_Implicit(Primrose.Primitives.ValueTypes.float4[])~Primrose.Primitives.ValueTypes.float4x4">
            <summary>Creates a float4x4 value from this array</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.float4x4.Identity">
            <summary>Returns a float4x4 value representing the identity transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateTranslation(Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns a float4x4 value representing a translation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateRotationX(System.Single)">
            <summary>Returns a float4x4 value representing a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateRotationY(System.Single)">
            <summary>Returns a float4x4 value representing a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateRotationZ(System.Single)">
            <summary>Returns a float4x4 value representing a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateRotation(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>Returns a float4x4 value representing a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateFromAxisAngle(Primrose.Primitives.ValueTypes.float3,System.Single)">
            <summary>Returns a float4x4 value representing a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateScaling(Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns a float4x4 value representing a scale transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns a float4x4 value representing a orthographic projection matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns a float4x4 value representing a orthographic projection matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns a float4x4 value representing a perspective projection matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns a float4x4 value representing a perspective projection matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.LookAt(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns a float4x4 value representing a transformation from a current view point to a specified point</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Transpose">
            <summary>Returns a float4x4 value representing a transposition of a matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.Inverse">
            <summary>Returns a float4x4 value representing a inverse transformation of a matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.float4x4.CreateRotationFromQuaternion(Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Returns a float4x4 value representing a rotation transformation matrix</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.floatRect">
            <summary>A float rectangle value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.floatRect.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.floatRect.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.floatRect.w">
            <summary>The w or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.floatRect.h">
            <summary>The h or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a floatRect value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.#ctor(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>
            Creates a floatRect value
            </summary>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.floatRect.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.floatRect.Position">
            <summary>The position of the rectangle</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.floatRect.Size">
            <summary>The position of the rectangle</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.ToArray">
            <summary>Creates a float[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.FromArray(System.Single[])">
            <summary>Creates a floatRect from an array</summary>
            <param name="array">The array</param>
            <returns>A floatRect value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a floatRect</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.FromArray(System.Int32[])">
            <summary>Creates a floatRect from an array</summary>
            <param name="array">The array</param>
            <returns>A floatRect value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a floatRect</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.Parse(System.String)">
            <summary>Parses a floatRect from a string</summary>
            <param name="s">The string value</param>
            <returns>A floatRect value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Parses a floatRect from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A floatRect value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.TryParse(System.String,Primrose.Primitives.ValueTypes.floatRect@)">
            <summary>Parses a floatRect from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.TryParse(System.String,Primrose.Primitives.ValueTypes.floatRect@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Parses a floatRect from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.Equals(Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.op_Equality(Primrose.Primitives.ValueTypes.floatRect,Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Determines if two floatRect values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.op_Inequality(Primrose.Primitives.ValueTypes.floatRect,Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Determines if two floatRect values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.floatRect.Empty">
            <summary>Returns a floatRect value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.ContainsPoint(Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.IntersectsRectangle(Primrose.Primitives.ValueTypes.float2,Primrose.Primitives.ValueTypes.float2)">
            <summary>Determines if at least part of a rectangle intersects with the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.IntersectsRectangle(Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Determines if at least part of a rectangle intersects with the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.Union(Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Returns the bounding rectangle of the union of two rectangles</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.Interesect(Primrose.Primitives.ValueTypes.floatRect)">
            <summary>Returns the bounding rectangle of the floatersection of two rectangles</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.op_Explicit(Primrose.Primitives.ValueTypes.floatRect)~System.Single[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.op_Explicit(System.Single[])~Primrose.Primitives.ValueTypes.floatRect">
            <summary>Creates a floatRect value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.op_Explicit(System.Int32[])~Primrose.Primitives.ValueTypes.floatRect">
            <summary>Creates a floatRect value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.floatRect.op_Implicit(Primrose.Primitives.ValueTypes.intRect)~Primrose.Primitives.ValueTypes.floatRect">
            <summary>Converts a intRect value to a floatRect value</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.int2">
            <summary>A int2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a int2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.int2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.ToArray">
            <summary>Creates a int[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.FromArray(System.Int32[])">
            <summary>Creates a int2 from an array</summary>
            <param name="array">The array</param>
            <returns>A int2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a int2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.Parse(System.String)">
            <summary>Parses a int2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A int2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.int2)">
            <summary>Parses a int2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A int2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.TryParse(System.String,Primrose.Primitives.ValueTypes.int2@)">
            <summary>Parses a int2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.TryParse(System.String,Primrose.Primitives.ValueTypes.int2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.int2)">
            <summary>Parses a int2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_UnaryNegation(Primrose.Primitives.ValueTypes.int2)">
            <summary>Performs a memberwise negation of a int2 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Addition(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Performs an addition operation between two int2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Subtraction(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Performs a subtraction operation between two int2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Multiply(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Performs a memberwise multiplication operation between two int2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Division(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Performs a memberwise division between two int2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Multiply(System.Int32,Primrose.Primitives.ValueTypes.int2)">
            <summary>Performs a multiplication operation between a int2 value and a int multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Multiply(Primrose.Primitives.ValueTypes.int2,System.Int32)">
            <summary>Performs a multiplication operation between a int2 value and a int multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Division(Primrose.Primitives.ValueTypes.int2,System.Int32)">
            <summary>Performs a division operation between a int2 value and a int divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Modulus(Primrose.Primitives.ValueTypes.int2,System.Int32)">
            <summary>Performs a modulus operation between a int2 value and a int divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.Equals(Primrose.Primitives.ValueTypes.int2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.CompareTo(Primrose.Primitives.ValueTypes.int2)">
            <summary>Compares one int2 value to the other</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Equality(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Determines if two int2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Inequality(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Determines if two int2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.int2.Empty">
            <summary>Returns a int2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Explicit(Primrose.Primitives.ValueTypes.int2)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Explicit(Primrose.Primitives.ValueTypes.int2)~System.Int32[]">
            <summary>Creates a int[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int2.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.int2">
            <summary>Creates a int2 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.int3">
            <summary>A int3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a int3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.int3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.ToArray">
            <summary>Creates a int[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.FromArray(System.Int32[])">
            <summary>Creates a int3 from an array</summary>
            <param name="array">The array</param>
            <returns>A int3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a int3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.Parse(System.String)">
            <summary>Parses a int3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A int3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.int3)">
            <summary>Parses a int3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A int3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.TryParse(System.String,Primrose.Primitives.ValueTypes.int3@)">
            <summary>Parses a int3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.TryParse(System.String,Primrose.Primitives.ValueTypes.int3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.int3)">
            <summary>Parses a int3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_UnaryNegation(Primrose.Primitives.ValueTypes.int3)">
            <summary>Performs a memberwise negation of a int3 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Addition(Primrose.Primitives.ValueTypes.int3,Primrose.Primitives.ValueTypes.int3)">
            <summary>Performs an addition operation between two int3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Subtraction(Primrose.Primitives.ValueTypes.int3,Primrose.Primitives.ValueTypes.int3)">
            <summary>Performs a subtraction operation between two int3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Multiply(Primrose.Primitives.ValueTypes.int3,Primrose.Primitives.ValueTypes.int3)">
            <summary>Performs a memberwise multiplication operation between two int3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Division(Primrose.Primitives.ValueTypes.int3,Primrose.Primitives.ValueTypes.int3)">
            <summary>Performs a memberwise division between two int3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Multiply(System.Int32,Primrose.Primitives.ValueTypes.int3)">
            <summary>Performs a multiplication operation between a int2 value and a int multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Multiply(Primrose.Primitives.ValueTypes.int3,System.Int32)">
            <summary>Performs a multiplication operation between a int3 value and a int multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Division(Primrose.Primitives.ValueTypes.int3,System.Int32)">
            <summary>Performs a division operation between a int3 value and a int divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Modulus(Primrose.Primitives.ValueTypes.int3,System.Int32)">
            <summary>Performs a modulus operation between a int3 value and a int divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.Equals(Primrose.Primitives.ValueTypes.int3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.CompareTo(Primrose.Primitives.ValueTypes.int3)">
            <summary>Compares one int3 value to the other</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Equality(Primrose.Primitives.ValueTypes.int3,Primrose.Primitives.ValueTypes.int3)">
            <summary>Determines if two int3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Inequality(Primrose.Primitives.ValueTypes.int3,Primrose.Primitives.ValueTypes.int3)">
            <summary>Determines if two int3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.int3.Empty">
            <summary>Returns a int3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Explicit(Primrose.Primitives.ValueTypes.int3)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Explicit(Primrose.Primitives.ValueTypes.int3)~System.Int32[]">
            <summary>Creates a int[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int3.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.int3">
            <summary>Creates a int3 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.int4">
            <summary>Defines a container containing four <see cref="T:System.Int32"/> values</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.int4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Primrose.Primitives.ValueTypes.int4"/> value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.int4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.ToArray">
            <summary>Creates a int[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.FromArray(System.Int32[])">
            <summary>Creates a int4 from an array</summary>
            <param name="array">The array</param>
            <returns>A int4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a int4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.Parse(System.String)">
            <summary>Parses a int4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A int4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.int4)">
            <summary>Parses a int4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A int4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.TryParse(System.String,Primrose.Primitives.ValueTypes.int4@)">
            <summary>Parses a int4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.TryParse(System.String,Primrose.Primitives.ValueTypes.int4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.int4)">
            <summary>Parses a int4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_UnaryNegation(Primrose.Primitives.ValueTypes.int4)">
            <summary>Performs a memberwise negation of a int4 value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Addition(Primrose.Primitives.ValueTypes.int4,Primrose.Primitives.ValueTypes.int4)">
            <summary>Performs an addition operation between two int4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Subtraction(Primrose.Primitives.ValueTypes.int4,Primrose.Primitives.ValueTypes.int4)">
            <summary>Performs a subtraction operation between two int4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Multiply(Primrose.Primitives.ValueTypes.int4,Primrose.Primitives.ValueTypes.int4)">
            <summary>Performs a memberwise multiplication operation between two int4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Division(Primrose.Primitives.ValueTypes.int4,Primrose.Primitives.ValueTypes.int4)">
            <summary>Performs a memberwise division between two int4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Multiply(System.Int32,Primrose.Primitives.ValueTypes.int4)">
            <summary>Performs a multiplication operation between a int2 value and a int multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Multiply(Primrose.Primitives.ValueTypes.int4,System.Int32)">
            <summary>Performs a multiplication operation between a int4 value and a int multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Division(Primrose.Primitives.ValueTypes.int4,System.Int32)">
            <summary>Performs a division operation between a int4 value and a int divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Modulus(Primrose.Primitives.ValueTypes.int4,System.Int32)">
            <summary>Performs a modulus operation between a int4 value and a int divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.Equals(Primrose.Primitives.ValueTypes.int4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.CompareTo(Primrose.Primitives.ValueTypes.int4)">
            <summary>Compares one int3 value to the other</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Equality(Primrose.Primitives.ValueTypes.int4,Primrose.Primitives.ValueTypes.int4)">
            <summary>Determines if two int4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Inequality(Primrose.Primitives.ValueTypes.int4,Primrose.Primitives.ValueTypes.int4)">
            <summary>Determines if two int4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.int4.Empty">
            <summary>Returns a int4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Explicit(Primrose.Primitives.ValueTypes.int4)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Explicit(Primrose.Primitives.ValueTypes.int4)~System.Int32[]">
            <summary>Creates a int[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.int4.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.int4">
            <summary>Creates a int4 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.intRect">
            <summary>A int rectangle value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.intRect.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.intRect.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.intRect.w">
            <summary>The w or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.intRect.h">
            <summary>The h or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a intRect value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.#ctor(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>
            Creates a intRect value
            </summary>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.intRect.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.intRect.Position">
            <summary>The position of the rectangle</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.intRect.Size">
            <summary>The position of the rectangle</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.ToArray">
            <summary>Creates a int[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.FromArray(System.Int32[])">
            <summary>Creates a intRect from an array</summary>
            <param name="array">The array</param>
            <returns>A intRect value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a intRect</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.Parse(System.String)">
            <summary>Parses a intRect from a string</summary>
            <param name="s">The string value</param>
            <returns>A intRect value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.intRect)">
            <summary>Parses a intRect from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A intRect value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.TryParse(System.String,Primrose.Primitives.ValueTypes.intRect@)">
            <summary>Parses a intRect from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.TryParse(System.String,Primrose.Primitives.ValueTypes.intRect@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.intRect)">
            <summary>Parses a intRect from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.Equals(Primrose.Primitives.ValueTypes.intRect)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.op_Equality(Primrose.Primitives.ValueTypes.intRect,Primrose.Primitives.ValueTypes.intRect)">
            <summary>Determines if two intRect values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.op_Inequality(Primrose.Primitives.ValueTypes.intRect,Primrose.Primitives.ValueTypes.intRect)">
            <summary>Determines if two intRect values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.intRect.Empty">
            <summary>Returns a intRect value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.ContainsPoint(Primrose.Primitives.ValueTypes.int2)">
            <summary>Determines if a point is inside the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.IntersectsRectangle(Primrose.Primitives.ValueTypes.int2,Primrose.Primitives.ValueTypes.int2)">
            <summary>Determines if at least part of a rectangle intersects with the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.IntersectsRectangle(Primrose.Primitives.ValueTypes.intRect)">
            <summary>Determines if at least part of a rectangle intersects with the rectangle represented</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.Union(Primrose.Primitives.ValueTypes.intRect)">
            <summary>Returns the bounding rectangle of the union of two rectangles</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.Intersect(Primrose.Primitives.ValueTypes.intRect)">
            <summary>Returns the bounding rectangle of the intersection of two rectangles</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.op_Explicit(Primrose.Primitives.ValueTypes.intRect)~System.Int32[]">
            <summary>Creates a int[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.intRect.op_Explicit(System.Int32[])~Primrose.Primitives.ValueTypes.intRect">
            <summary>Creates a intRect value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.quaternion">
            <summary>A quaternion value, essentially a float4 with special operation behavior</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.quaternion.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.quaternion.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.quaternion.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.quaternion.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.quaternion.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.ToArray">
            <summary>Creates a float[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.FromArray(System.Single[])">
            <summary>Creates a quaternion from an array</summary>
            <param name="array">The array</param>
            <returns>A quaternion value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a quaternion</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.FromArray(System.Int32[])">
            <summary>Creates a quaternion from an array</summary>
            <param name="array">The array</param>
            <returns>A quaternion value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a quaternion</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Parse(System.String)">
            <summary>Parses a quaternion from a string</summary>
            <param name="s">The string value</param>
            <returns>A quaternion value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Parses a quaternion from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A quaternion value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.TryParse(System.String,Primrose.Primitives.ValueTypes.quaternion@)">
            <summary>Parses a quaternion from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.TryParse(System.String,Primrose.Primitives.ValueTypes.quaternion@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Parses a quaternion from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_UnaryNegation(Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Performs a memberwise negation of a quaternion value</summary>
            <param name="a"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Addition(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Performs an addition operation between two quaternion values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Subtraction(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Performs a subtraction operation between two quaternion values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Multiply(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Performs a memberwise multiplication operation between two quaternion values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Division(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Performs a memberwise division between two quaternion values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Multiply(System.Single,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Performs a multiplication operation between a quaternion value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Multiply(Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>Performs a multiplication operation between a quaternion value and a float multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Multiply(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.float3)">
            <summary>Performs a multiplication operation between a quaternion value and a float3 vector</summary>
            <param name="a"></param><param name="v"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Division(Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>Performs a division operation between a quaternion value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Modulus(Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>Performs a modulus operation between a quaternion value and a float divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Diff(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Returns the absolute difference between two quaternion values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Equals(Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Explicit(Primrose.Primitives.ValueTypes.quaternion)~Primrose.Primitives.ValueTypes.float4">
            <summary>Casts a quaternion to float4</summary>
            <param name="o">The object to cast</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Equality(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Determines if two quaternion values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Inequality(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Determines if two quaternion values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.quaternion.Empty">
            <summary>Returns a quaternion value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Explicit(Primrose.Primitives.ValueTypes.quaternion)~System.Array">
            <summary>Creates an array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Explicit(Primrose.Primitives.ValueTypes.quaternion)~System.Single[]">
            <summary>Creates a float[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Implicit(System.Single[])~Primrose.Primitives.ValueTypes.quaternion">
            <summary>Creates a quaternion value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Implicit(System.Int32[])~Primrose.Primitives.ValueTypes.quaternion">
            <summary>Creates a quaternion value from this array</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.op_Implicit(Primrose.Primitives.ValueTypes.float4)~Primrose.Primitives.ValueTypes.quaternion">
            <summary>Converts a float4 value to a quaternion value</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.quaternion.Identity">
            <summary>Returns the identity quaternion value</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.quaternion.Length">
            <summary>Calculates the length, or Euclidean distance, of the vector</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.quaternion.LengthSquared">
            <summary>Calculates the length, or Euclidean distance, of the vector squared</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Normalize">
            <summary>Returns a quaternion value of the same direction, normalized to unit length</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Conjugate">
            <summary>Returns a quaternion value of the same direction, normalized to unit length</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Inverse">
            <summary>Calculates the inverse of a quaternion</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.ToAxisAngle">
            <summary>Converts a rotation to angle-axis representation</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.FromAxis(Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3,Primrose.Primitives.ValueTypes.float3)">
            <summary>Returns a quaternion value derived from rotations along the three axes</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.FromRotationMatrix(Primrose.Primitives.ValueTypes.float4x4)">
            <summary>Returns a quaternion value derived from a rotation transformation matrix</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Dot(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Calculates the dot product between to quaternion vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Dot(Primrose.Primitives.ValueTypes.quaternion)">
            <summary>Calculates the dot product between to quaternion vectors</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Swap(Primrose.Primitives.ValueTypes.quaternion@,Primrose.Primitives.ValueTypes.quaternion@)">
            <summary>Swaps two quaternion values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Swap(Primrose.Primitives.ValueTypes.quaternion@)">
            <summary>Swaps two quaternion values</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Log">
            <summary>Calculates the log of a quaternion</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Exp">
            <summary>Calculates the exponent of a quaternion</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Lerp(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>
            Returns a value linearly interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.SLerp(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>
            Returns a value spherically interpolated towards a target
            </summary>
            <param name="value">The starting value</param>
            <param name="target">The target value</param>
            <param name="frac">The fraction to be interpolated towards the target point</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Squad(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>
            Returns a value quadractically interpolated towards a target
            </summary>
            <param name="q1">The previous quaterion value</param>
            <param name="q2">The next quaterion value</param>
            <param name="ta">The start of the target segment</param>
            <param name="tb">The start of the target segment</param>
            <param name="t">The interpolation factor</param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.SimpleSquad(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,System.Single)">
            <summary>
            Returns a value quadractically interpolated towards a target
            </summary>
            <param name="prev"></param>
            <param name="q1"></param>
            <param name="q2"></param>
            <param name="post"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.quaternion.Spline(Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion,Primrose.Primitives.ValueTypes.quaternion)">
            <summary>
            Returns a value polynomially interpolated towards a target (cubic interpolation)
            </summary>
            <param name="pre">The previous quaterion value</param>
            <param name="q">The target value</param>
            <param name="post">The next quaterion value</param>
            <returns></returns>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.sbyte2">
            <summary>A sbyte2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.#ctor(System.SByte,System.SByte)">
            <summary>
            Creates a sbyte2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.sbyte2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.ToArray">
            <summary>Creates a sbyte[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.FromArray(System.SByte[])">
            <summary>Creates a sbyte2 from an array</summary>
            <param name="array">The array</param>
            <returns>A sbyte2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a sbyte2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.Parse(System.String)">
            <summary>Parses a sbyte2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A sbyte2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.sbyte2)">
            <summary>Parses a sbyte2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A sbyte2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.TryParse(System.String,Primrose.Primitives.ValueTypes.sbyte2@)">
            <summary>Parses a sbyte2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.TryParse(System.String,Primrose.Primitives.ValueTypes.sbyte2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.sbyte2)">
            <summary>Parses a sbyte2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.Equals(Primrose.Primitives.ValueTypes.sbyte2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.op_Equality(Primrose.Primitives.ValueTypes.sbyte2,Primrose.Primitives.ValueTypes.sbyte2)">
            <summary>Determines if two sbyte2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.op_Inequality(Primrose.Primitives.ValueTypes.sbyte2,Primrose.Primitives.ValueTypes.sbyte2)">
            <summary>Determines if two sbyte2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.sbyte2.Empty">
            <summary>Returns a sbyte2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.op_Explicit(Primrose.Primitives.ValueTypes.sbyte2)~System.SByte[]">
            <summary>Creates a sbyte[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte2.op_Explicit(System.SByte[])~Primrose.Primitives.ValueTypes.sbyte2">
            <summary>Creates a sbyte2 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.sbyte3">
            <summary>A sbyte3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.#ctor(System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a sbyte3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.sbyte3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.ToArray">
            <summary>Creates a sbyte[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.FromArray(System.SByte[])">
            <summary>Creates a sbyte3 from an array</summary>
            <param name="array">The array</param>
            <returns>A sbyte3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a sbyte3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.Parse(System.String)">
            <summary>Parses a sbyte3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A sbyte3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.sbyte3)">
            <summary>Parses a sbyte3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A sbyte3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.TryParse(System.String,Primrose.Primitives.ValueTypes.sbyte3@)">
            <summary>Parses a sbyte3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.TryParse(System.String,Primrose.Primitives.ValueTypes.sbyte3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.sbyte3)">
            <summary>Parses a sbyte3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.Equals(Primrose.Primitives.ValueTypes.sbyte3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.op_Equality(Primrose.Primitives.ValueTypes.sbyte3,Primrose.Primitives.ValueTypes.sbyte3)">
            <summary>Determines if two sbyte3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.op_Inequality(Primrose.Primitives.ValueTypes.sbyte3,Primrose.Primitives.ValueTypes.sbyte3)">
            <summary>Determines if two sbyte3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.sbyte3.Empty">
            <summary>Returns a sbyte3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.op_Explicit(Primrose.Primitives.ValueTypes.sbyte3)~System.SByte[]">
            <summary>Creates a sbyte[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte3.op_Explicit(System.SByte[])~Primrose.Primitives.ValueTypes.sbyte3">
            <summary>Creates a sbyte3 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.sbyte4">
            <summary>A sbyte4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.sbyte4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            Creates a sbyte4 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.sbyte4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.ToArray">
            <summary>Creates a sbyte[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.FromArray(System.SByte[])">
            <summary>Creates a sbyte4 from an array</summary>
            <param name="array">The array</param>
            <returns>A sbyte4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a sbyte4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.Parse(System.String)">
            <summary>Parses a sbyte4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A sbyte4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.sbyte4)">
            <summary>Parses a sbyte4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A sbyte4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.TryParse(System.String,Primrose.Primitives.ValueTypes.sbyte4@)">
            <summary>Parses a sbyte4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.TryParse(System.String,Primrose.Primitives.ValueTypes.sbyte4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.sbyte4)">
            <summary>Parses a sbyte4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.Equals(Primrose.Primitives.ValueTypes.sbyte4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.op_Equality(Primrose.Primitives.ValueTypes.sbyte4,Primrose.Primitives.ValueTypes.sbyte4)">
            <summary>Determines if two sbyte4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.op_Inequality(Primrose.Primitives.ValueTypes.sbyte4,Primrose.Primitives.ValueTypes.sbyte4)">
            <summary>Determines if two sbyte4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.sbyte4.Empty">
            <summary>Returns a sbyte4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.op_Explicit(Primrose.Primitives.ValueTypes.sbyte4)~System.SByte[]">
            <summary>Creates a sbyte[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.sbyte4.op_Explicit(System.SByte[])~Primrose.Primitives.ValueTypes.sbyte4">
            <summary>Creates a sbyte4 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.short2">
            <summary>A short2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.#ctor(System.Int16,System.Int16)">
            <summary>
            Creates a short2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.short2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.ToArray">
            <summary>Creates a short[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.FromArray(System.Int16[])">
            <summary>Creates a short2 from an array</summary>
            <param name="array">The array</param>
            <returns>A short2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a short2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.Parse(System.String)">
            <summary>Parses a short2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A short2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.short2)">
            <summary>Parses a short2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A short2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.TryParse(System.String,Primrose.Primitives.ValueTypes.short2@)">
            <summary>Parses a short2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.TryParse(System.String,Primrose.Primitives.ValueTypes.short2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.short2)">
            <summary>Parses a short2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.Equals(Primrose.Primitives.ValueTypes.short2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.op_Equality(Primrose.Primitives.ValueTypes.short2,Primrose.Primitives.ValueTypes.short2)">
            <summary>Determines if two short2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.op_Inequality(Primrose.Primitives.ValueTypes.short2,Primrose.Primitives.ValueTypes.short2)">
            <summary>Determines if two short2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.short2.Empty">
            <summary>Returns a short2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.op_Explicit(Primrose.Primitives.ValueTypes.short2)~System.Int16[]">
            <summary>Creates a short[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short2.op_Explicit(System.Int16[])~Primrose.Primitives.ValueTypes.short2">
            <summary>Creates a short2 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.short3">
            <summary>A short3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a short3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.short3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.ToArray">
            <summary>Creates a short[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.FromArray(System.Int16[])">
            <summary>Creates a short3 from an array</summary>
            <param name="array">The array</param>
            <returns>A short3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a short3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.Parse(System.String)">
            <summary>Parses a short3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A short3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.short3)">
            <summary>Parses a short3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A short3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.TryParse(System.String,Primrose.Primitives.ValueTypes.short3@)">
            <summary>Parses a short3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.TryParse(System.String,Primrose.Primitives.ValueTypes.short3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.short3)">
            <summary>Parses a short3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.Equals(Primrose.Primitives.ValueTypes.short3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.op_Equality(Primrose.Primitives.ValueTypes.short3,Primrose.Primitives.ValueTypes.short3)">
            <summary>Determines if two short3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.op_Inequality(Primrose.Primitives.ValueTypes.short3,Primrose.Primitives.ValueTypes.short3)">
            <summary>Determines if two short3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.short3.Empty">
            <summary>Returns a short3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.op_Explicit(Primrose.Primitives.ValueTypes.short3)~System.Int16[]">
            <summary>Creates a short[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short3.op_Explicit(System.Int16[])~Primrose.Primitives.ValueTypes.short3">
            <summary>Creates a short3 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.short4">
            <summary>A short4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.short4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Creates a short4 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.short4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.ToArray">
            <summary>Creates a short[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.FromArray(System.Int16[])">
            <summary>Creates a short4 from an array</summary>
            <param name="array">The array</param>
            <returns>A short4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a short4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.Parse(System.String)">
            <summary>Parses a short4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A short4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.short4)">
            <summary>Parses a short4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A short4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.TryParse(System.String,Primrose.Primitives.ValueTypes.short4@)">
            <summary>Parses a short4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.TryParse(System.String,Primrose.Primitives.ValueTypes.short4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.short4)">
            <summary>Parses a short4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.Equals(Primrose.Primitives.ValueTypes.short4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.op_Equality(Primrose.Primitives.ValueTypes.short4,Primrose.Primitives.ValueTypes.short4)">
            <summary>Determines if two short4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.op_Inequality(Primrose.Primitives.ValueTypes.short4,Primrose.Primitives.ValueTypes.short4)">
            <summary>Determines if two short4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.short4.Empty">
            <summary>Returns a short4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.op_Explicit(Primrose.Primitives.ValueTypes.short4)~System.Int16[]">
            <summary>Creates a short[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.short4.op_Explicit(System.Int16[])~Primrose.Primitives.ValueTypes.short4">
            <summary>Creates a short4 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.uint2">
            <summary>A uint2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a uint2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.uint2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.ToArray">
            <summary>Creates a uint[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.FromArray(System.UInt32[])">
            <summary>Creates a uint2 from an array</summary>
            <param name="array">The array</param>
            <returns>A uint2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a uint2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.Parse(System.String)">
            <summary>Parses a uint2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A uint2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Parses a uint2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A uint2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.TryParse(System.String,Primrose.Primitives.ValueTypes.uint2@)">
            <summary>Parses a uint2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.TryParse(System.String,Primrose.Primitives.ValueTypes.uint2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Parses a uint2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Addition(Primrose.Primitives.ValueTypes.uint2,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Performs an addition operation between two uint2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Subtraction(Primrose.Primitives.ValueTypes.uint2,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Performs a subtraction operation between two uint2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Multiply(Primrose.Primitives.ValueTypes.uint2,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Performs a memberwise multiplication operation between two uint2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Division(Primrose.Primitives.ValueTypes.uint2,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Performs a memberwise division between two uint2 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Multiply(Primrose.Primitives.ValueTypes.uint2,System.UInt32)">
            <summary>Performs a multiplication operation between a uint2 value and a uint multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Division(Primrose.Primitives.ValueTypes.uint2,System.UInt32)">
            <summary>Performs a division operation between a uint2 value and a uint divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Modulus(Primrose.Primitives.ValueTypes.uint2,System.UInt32)">
            <summary>Performs a modulus operation between a uint2 value and a uint divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.Equals(Primrose.Primitives.ValueTypes.uint2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Equality(Primrose.Primitives.ValueTypes.uint2,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Determines if two uint2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Inequality(Primrose.Primitives.ValueTypes.uint2,Primrose.Primitives.ValueTypes.uint2)">
            <summary>Determines if two uint2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.uint2.Empty">
            <summary>Returns a uint2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Explicit(Primrose.Primitives.ValueTypes.uint2)~System.UInt32[]">
            <summary>Creates a uint[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint2.op_Explicit(System.UInt32[])~Primrose.Primitives.ValueTypes.uint2">
            <summary>Creates a uint2 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.uint3">
            <summary>A uint3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a uint3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.uint3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.ToArray">
            <summary>Creates a uint[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.FromArray(System.UInt32[])">
            <summary>Creates a uint3 from an array</summary>
            <param name="array">The array</param>
            <returns>A uint3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a uint3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.Parse(System.String)">
            <summary>Parses a uint3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A uint3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Parses a uint3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A uint3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.TryParse(System.String,Primrose.Primitives.ValueTypes.uint3@)">
            <summary>Parses a uint3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.TryParse(System.String,Primrose.Primitives.ValueTypes.uint3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Parses a uint3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Addition(Primrose.Primitives.ValueTypes.uint3,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Performs an addition operation between two uint3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Subtraction(Primrose.Primitives.ValueTypes.uint3,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Performs a subtraction operation between two uint3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Multiply(Primrose.Primitives.ValueTypes.uint3,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Performs a memberwise multiplication operation between two uint3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Division(Primrose.Primitives.ValueTypes.uint3,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Performs a memberwise division between two uint3 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Multiply(Primrose.Primitives.ValueTypes.uint3,System.UInt32)">
            <summary>Performs a multiplication operation between a uint3 value and a uint multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Division(Primrose.Primitives.ValueTypes.uint3,System.UInt32)">
            <summary>Performs a division operation between a uint3 value and a uint divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Modulus(Primrose.Primitives.ValueTypes.uint3,System.UInt32)">
            <summary>Performs a modulus operation between a uint3 value and a uint divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.Equals(Primrose.Primitives.ValueTypes.uint3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Equality(Primrose.Primitives.ValueTypes.uint3,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Determines if two uint3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Inequality(Primrose.Primitives.ValueTypes.uint3,Primrose.Primitives.ValueTypes.uint3)">
            <summary>Determines if two uint3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.uint3.Empty">
            <summary>Returns a uint3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Explicit(Primrose.Primitives.ValueTypes.uint3)~System.UInt32[]">
            <summary>Creates a uint[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint3.op_Explicit(System.UInt32[])~Primrose.Primitives.ValueTypes.uint3">
            <summary>Creates a uint3 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.uint4">
            <summary>A uint4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.uint4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a uint4 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.uint4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.ToArray">
            <summary>Creates a uint[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.FromArray(System.UInt32[])">
            <summary>Creates a uint4 from an array</summary>
            <param name="array">The array</param>
            <returns>A uint4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a uint4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.Parse(System.String)">
            <summary>Parses a uint4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A uint4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Parses a uint4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A uint4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.TryParse(System.String,Primrose.Primitives.ValueTypes.uint4@)">
            <summary>Parses a uint4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.TryParse(System.String,Primrose.Primitives.ValueTypes.uint4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Parses a uint4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Addition(Primrose.Primitives.ValueTypes.uint4,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Performs an addition operation between two uint4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Subtraction(Primrose.Primitives.ValueTypes.uint4,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Performs a subtraction operation between two uint4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Multiply(Primrose.Primitives.ValueTypes.uint4,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Performs a memberwise multiplication operation between two uint4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Division(Primrose.Primitives.ValueTypes.uint4,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Performs a memberwise division between two uint4 values</summary>
            <param name="a"></param><param name="b"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Multiply(Primrose.Primitives.ValueTypes.uint4,System.UInt32)">
            <summary>Performs a multiplication operation between a uint4 value and a uint multiplier</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Division(Primrose.Primitives.ValueTypes.uint4,System.UInt32)">
            <summary>Performs a division operation between a uint4 value and a uint divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Modulus(Primrose.Primitives.ValueTypes.uint4,System.UInt32)">
            <summary>Performs a modulus operation between a uint4 value and a uint divisor</summary>
            <param name="a"></param><param name="m"></param><returns></returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.Equals(Primrose.Primitives.ValueTypes.uint4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Equality(Primrose.Primitives.ValueTypes.uint4,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Determines if two uint4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Inequality(Primrose.Primitives.ValueTypes.uint4,Primrose.Primitives.ValueTypes.uint4)">
            <summary>Determines if two uint4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.uint4.Empty">
            <summary>Returns a uint4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Explicit(Primrose.Primitives.ValueTypes.uint4)~System.UInt32[]">
            <summary>Creates a uint[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.uint4.op_Explicit(System.UInt32[])~Primrose.Primitives.ValueTypes.uint4">
            <summary>Creates a uint4 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.ushort2">
            <summary>A ushort2 pair value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort2.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort2.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a ushort2 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.ushort2.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.ToArray">
            <summary>Creates a ushort[] array from this value</summary>
            <returns>An array of length 2 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.FromArray(System.UInt16[])">
            <summary>Creates a ushort2 from an array</summary>
            <param name="array">The array</param>
            <returns>A ushort2 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 2 can be converted to a ushort2</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.Parse(System.String)">
            <summary>Parses a ushort2 from a string</summary>
            <param name="s">The string value</param>
            <returns>A ushort2 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.ushort2)">
            <summary>Parses a ushort2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A ushort2 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.TryParse(System.String,Primrose.Primitives.ValueTypes.ushort2@)">
            <summary>Parses a ushort2 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.TryParse(System.String,Primrose.Primitives.ValueTypes.ushort2@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.ushort2)">
            <summary>Parses a ushort2 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.Equals(Primrose.Primitives.ValueTypes.ushort2)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.op_Equality(Primrose.Primitives.ValueTypes.ushort2,Primrose.Primitives.ValueTypes.ushort2)">
            <summary>Determines if two ushort2 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.op_Inequality(Primrose.Primitives.ValueTypes.ushort2,Primrose.Primitives.ValueTypes.ushort2)">
            <summary>Determines if two ushort2 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.ushort2.Empty">
            <summary>Returns a ushort2 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.op_Explicit(Primrose.Primitives.ValueTypes.ushort2)~System.UInt16[]">
            <summary>Creates a ushort[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort2.op_Explicit(System.UInt16[])~Primrose.Primitives.ValueTypes.ushort2">
            <summary>Creates a ushort2 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.ushort3">
            <summary>A ushort3 triple value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort3.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort3.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort3.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a ushort3 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.ushort3.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.ToArray">
            <summary>Creates a ushort[] array from this value</summary>
            <returns>An array of length 3 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.FromArray(System.UInt16[])">
            <summary>Creates a ushort3 from an array</summary>
            <param name="array">The array</param>
            <returns>A ushort3 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 3 can be converted to a ushort3</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.Parse(System.String)">
            <summary>Parses a ushort3 from a string</summary>
            <param name="s">The string value</param>
            <returns>A ushort3 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.ushort3)">
            <summary>Parses a ushort3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A ushort3 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.TryParse(System.String,Primrose.Primitives.ValueTypes.ushort3@)">
            <summary>Parses a ushort3 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.TryParse(System.String,Primrose.Primitives.ValueTypes.ushort3@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.ushort3)">
            <summary>Parses a ushort3 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.Equals(Primrose.Primitives.ValueTypes.ushort3)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.op_Equality(Primrose.Primitives.ValueTypes.ushort3,Primrose.Primitives.ValueTypes.ushort3)">
            <summary>Determines if two ushort3 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.op_Inequality(Primrose.Primitives.ValueTypes.ushort3,Primrose.Primitives.ValueTypes.ushort3)">
            <summary>Determines if two ushort3 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.ushort3.Empty">
            <summary>Returns a ushort3 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.op_Explicit(Primrose.Primitives.ValueTypes.ushort3)~System.UInt16[]">
            <summary>Creates a ushort[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort3.op_Explicit(System.UInt16[])~Primrose.Primitives.ValueTypes.ushort3">
            <summary>Creates a ushort3 value from this array</summary>
        </member>
        <member name="T:Primrose.Primitives.ValueTypes.ushort4">
            <summary>A ushort4 quad value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort4.x">
            <summary>The x or [0] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort4.y">
            <summary>The y or [1] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort4.z">
            <summary>The z or [2] value</summary>
        </member>
        <member name="F:Primrose.Primitives.ValueTypes.ushort4.w">
            <summary>The w or [3] value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a ushort4 value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.ushort4.Item(System.Int32)">
            <summary>The value indexer</summary>
            <exception cref="T:System.IndexOutOfRangeException">The array is accessed with an invalid index</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.ToString">
            <summary>Returns the string representation of this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.ToArray">
            <summary>Creates a ushort[] array from this value</summary>
            <returns>An array of length 4 with identical indexed values</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.FromArray(System.UInt16[])">
            <summary>Creates a ushort4 from an array</summary>
            <param name="array">The array</param>
            <returns>A ushort4 value</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> cannot be null</exception>
            <exception cref="T:Primrose.Primitives.ArrayMismatchException">Only an array of length 4 can be converted to a ushort4</exception>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.Parse(System.String)">
            <summary>Parses a ushort4 from a string</summary>
            <param name="s">The string value</param>
            <returns>A ushort4 value</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.Parse(System.String,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.ushort4)">
            <summary>Parses a ushort4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <returns>A ushort4 value, or the default value if the parsing fails</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.TryParse(System.String,Primrose.Primitives.ValueTypes.ushort4@)">
            <summary>Parses a ushort4 from a string</summary>
            <param name="s">The string value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.TryParse(System.String,Primrose.Primitives.ValueTypes.ushort4@,Primrose.Primitives.Parsers.IResolver,Primrose.Primitives.ValueTypes.ushort4)">
            <summary>Parses a ushort4 from a string</summary>
            <param name="s">The string value</param>
            <param name="resolver">A string resolver function</param>
            <param name="defaultValue">The default value</param>
            <param name="result">The parsed value</param>
            <returns>True if the parse is successful</returns>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.Equals(System.Object)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="obj">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.Equals(Primrose.Primitives.ValueTypes.ushort4)">
            <summary>Returns true if the value of another object is equal to this object</summary>
            <param name="other">The object to compare for equality</param>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.GetHashCode">
            <summary>Generates the hash code for this object</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.op_Equality(Primrose.Primitives.ValueTypes.ushort4,Primrose.Primitives.ValueTypes.ushort4)">
            <summary>Determines if two ushort4 values are equal</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.op_Inequality(Primrose.Primitives.ValueTypes.ushort4,Primrose.Primitives.ValueTypes.ushort4)">
            <summary>Determines if two ushort4 values are not equal</summary>
        </member>
        <member name="P:Primrose.Primitives.ValueTypes.ushort4.Empty">
            <summary>Returns a ushort4 value with all elements set to their default value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.op_Explicit(Primrose.Primitives.ValueTypes.ushort4)~System.UInt16[]">
            <summary>Creates a ushort[] array from this value</summary>
        </member>
        <member name="M:Primrose.Primitives.ValueTypes.ushort4.op_Explicit(System.UInt16[])~Primrose.Primitives.ValueTypes.ushort4">
            <summary>Creates a ushort4 value from this array</summary>
        </member>
        <member name="T:Primrose.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Primrose.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Primrose.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Primrose.Resource.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_AFactoryObjectDuplicateID">
            <summary>
              Looks up a localized string similar to Setting ID to AFactoryObject with existing ID &apos;{0}&apos; is not allowed!.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ArrayMismatchException">
            <summary>
              Looks up a localized string similar to Attempted operation between two arrays of different length..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ArrayMismatchException_length_length">
            <summary>
              Looks up a localized string similar to Attempted operation between two arrays of different lengths &apos;{0}&apos; and &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ArrayMismatchException_length_type">
            <summary>
              Looks up a localized string similar to Attempted assignment of an array of length {0} to {1}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CacheKeyNotFound">
            <summary>
              Looks up a localized string similar to Attempted to get an non-existent key &apos;{0}&apos; from a cache..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CapacityExceededException">
            <summary>
              Looks up a localized string similar to Attempted to push an item into {0} that has reached capacity limit of {1}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CollectionAddDuplicateKey">
            <summary>
              Looks up a localized string similar to Attempted to add an existing key &apos;{0}&apos; to a {1}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CollectionAddNullKey">
            <summary>
              Looks up a localized string similar to Attempted to add a null key to a {0}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CollectionPutNullKey">
            <summary>
              Looks up a localized string similar to Attempted to put value of a null key in a {0}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CollectionSetKeyNotFound">
            <summary>
              Looks up a localized string similar to Attempted to set value to an non-existent key &apos;{0}&apos; in a {1}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_CollectionSetNullKey">
            <summary>
              Looks up a localized string similar to Attempted to set value of a null key to a {0}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_DuplicateINISection">
            <summary>
              Looks up a localized string similar to Invalid duplicate section [{0}] detected..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ExpectedEnumException">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not an enum..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_FileNotFound">
            <summary>
              Looks up a localized string similar to The file {0} is not found!.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INIFileAttributeNotFound">
            <summary>
              Looks up a localized string similar to The attribute does not exist!.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INIKeyListInvalidType">
            <summary>
              Looks up a localized string similar to INIKeyList attribute can only be used with string[] data types! ({0}).
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INIKeyNotFound">
            <summary>
              Looks up a localized string similar to The key &apos;{0}&apos; in section &apos;{1}&apos; is not defined!.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INIRegistryListInvalidType">
            <summary>
              Looks up a localized string similar to INIRegistry attribute can only be used with Registry&lt;K,T&gt; data types! ({0}).
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INISectionNotFound">
            <summary>
              Looks up a localized string similar to The section &apos;{0}&apos; is not defined!.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INISubSectionKeyListInvalidType">
            <summary>
              Looks up a localized string similar to INISubSectionKeyListAttribute attribute can only be used with a single-level array (T[]) data type! ({0}).
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_INISubSectionListInvalidType">
            <summary>
              Looks up a localized string similar to INISubSectionListAttribute attribute can only be used with a single-level array (T[]) data type! ({0}).
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_InvalidIndex">
            <summary>
              Looks up a localized string similar to Attempted to access invalid index &apos;{0}&apos; of {1}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_InvalidStateCommandException">
            <summary>
              Looks up a localized string similar to Command &apos;{0}&apos; is not valid on state &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ObjectPoolBackgroundPoolNotCreated">
            <summary>
              Looks up a localized string similar to The background object pool for &apos;{0}&apos; has not been created..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ObjectPoolDuplicateBackgroundPool">
            <summary>
              Looks up a localized string similar to There is already a background object pool for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_ObjectPoolDuplicateItem">
            <summary>
              Looks up a localized string similar to The object to be admitted into the pool &apos;{0}&apos; already exists in the pool!.
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_RuleConversionException">
            <summary>
              Looks up a localized string similar to Attempted to parse invalid value &apos;{0}&apos; as {1}..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_UnsupportedParseException">
            <summary>
              Looks up a localized string similar to Attempted to parse a string from an unsupported type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Primrose.Resource.Strings.Error_UnsupportedWriteException">
            <summary>
              Looks up a localized string similar to Attempted to write a string from an unsupported type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary></summary>
        </member>
    </members>
</doc>
