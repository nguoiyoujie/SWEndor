
// This file is used by Code Analysis to maintain SuppressMessage 
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given 
// a specific target and scoped to a namespace, type, member, etc.

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerMethodGroupAllocationRule:Delegate allocation from a method group", Justification = "<Pending>")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createChannelGroup(System.String,FMOD.ChannelGroup@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createSound(System.String,FMOD.MODE,FMOD.CREATESOUNDEXINFO@,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createSoundGroup(System.String,FMOD.SoundGroup@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createStream(System.String,FMOD.MODE,FMOD.CREATESOUNDEXINFO@,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.loadPlugin(System.String,System.UInt32@,System.UInt32)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.setNetworkProxy(System.String)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.setPluginPath(System.String)~FMOD.RESULT")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createChannelGroup(System.String,FMOD.ChannelGroup@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createSound(System.Byte[],FMOD.MODE,FMOD.CREATESOUNDEXINFO@,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createSound(System.String,FMOD.MODE,FMOD.CREATESOUNDEXINFO@,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createSound(System.String,FMOD.MODE,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createSoundGroup(System.String,FMOD.SoundGroup@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createStream(System.Byte[],FMOD.MODE,FMOD.CREATESOUNDEXINFO@,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createStream(System.String,FMOD.MODE,FMOD.CREATESOUNDEXINFO@,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.createStream(System.String,FMOD.MODE,FMOD.Sound@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.getAdvancedSettings(FMOD.ADVANCEDSETTINGS@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.loadPlugin(System.String,System.UInt32@,System.UInt32)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.setAdvancedSettings(FMOD.ADVANCEDSETTINGS@)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.setNetworkProxy(System.String)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:FMOD.System.setPluginPath(System.String)~FMOD.RESULT")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Sound.SoundManager.Piece.Parser.Parse(SWEndor.FileFormat.INI.INIFile,System.String)~SWEndor.Sound.SoundManager.Piece")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Sound.SoundManager.Piece.Parser.Parse(SWEndor.FileFormat.INI.INIFile,System.String)~SWEndor.Sound.SoundManager.Piece")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerClosureSourceRule:Closure Allocation Source", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Game.Run")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerImplicitParamsRule:Array allocation for params parameter", Justification = "<Pending>", Scope = "member", Target = "~F:SWEndor.Globals.Version")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~F:SWEndor.Globals.Version")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion allocation for string concatenation", Justification = "<Pending>", Scope = "member", Target = "~F:SWEndor.Scenarios.Scripting.Expressions.Ops.binaryops")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.Components.MeshData.#ctor(System.String,System.String,System.String)")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.ActorTypeInfo.LoadFromINI")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Sound.SoundManager.Piece.UpdateSound")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerImplicitParamsRule:Array allocation for params parameter", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.EvalException.#ctor(SWEndor.Scenarios.Scripting.Expressions.ITracker,System.String,SWEndor.Scenarios.Scripting.Expressions.Val,SWEndor.Scenarios.Scripting.Expressions.Val,System.Exception)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerImplicitParamsRule:Array allocation for params parameter", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.EvalException.#ctor(SWEndor.Scenarios.Scripting.Expressions.ITracker,System.String,SWEndor.Scenarios.Scripting.Expressions.Val,System.Exception)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerImplicitParamsRule:Array allocation for params parameter", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.ParseException.#ctor(SWEndor.Scenarios.Scripting.Expressions.Lexer)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerImplicitParamsRule:Array allocation for params parameter", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.ParseException.#ctor(SWEndor.Scenarios.Scripting.Expressions.Lexer,SWEndor.Scenarios.Scripting.Expressions.TokenEnum)")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.EvalException.#ctor(SWEndor.Scenarios.Scripting.Expressions.ITracker,System.String,SWEndor.Scenarios.Scripting.Expressions.Val,SWEndor.Scenarios.Scripting.Expressions.Val,System.Exception)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.EvalException.#ctor(SWEndor.Scenarios.Scripting.Expressions.ITracker,System.String,SWEndor.Scenarios.Scripting.Expressions.Val,System.Exception)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.ParseException.#ctor(SWEndor.Scenarios.Scripting.Expressions.Lexer)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.ParseException.#ctor(SWEndor.Scenarios.Scripting.Expressions.Lexer,SWEndor.Scenarios.Scripting.Expressions.TokenEnum)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.ParseException.#ctor(SWEndor.Scenarios.Scripting.Expressions.Lexer,SWEndor.Scenarios.Scripting.Expressions.TokenEnum)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.LoadBindings")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleCameraMode(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleDecreaseSpeed(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleIncreaseSpeed(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleNextPrimaryWeaponMode(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleNextSecondaryWeaponMode(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectTogglePrevPrimaryWeaponMode(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectTogglePrevSecondaryWeaponMode(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleRadar(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleScenarioInfo(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleScoreboard(MTV3D65.CONST_TV_KEY)~System.Boolean")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.KeyboardControls.SelectToggleUI(MTV3D65.CONST_TV_KEY)~System.Boolean")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Settings.SaveSettings(SWEndor.Engine)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~P:SWEndor.Scenarios.Scripting.Expressions.Val.Value")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~F:SWEndor.Scenarios.Scripting.Expressions.Ops.binaryops")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.AI.Actions.Hunt.ToString~System.String")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerValueTypeNonOverridenCallRule:Non-overridden virtual method call on value type", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Actor.Squadron_Spawn(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Game.Tick")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Shaders.ShaderInfo.#ctor(SWEndor.Core.Engine,System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Shaders.ShaderInfo.GenerateShader~MTV3D65.TVShader")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.Components.AddOnData.SaveToINI(SWEndor.FileFormat.INI.INIFile,System.String,System.String,System.String,SWEndor.ActorTypes.Components.AddOnData[])")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.ActorTypeInfo.LoadFromINI(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.ActorTypeInfo.SaveToINI(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ExplosionTypes.ExplosionTypeInfo.SaveToINI(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ExplosionTypes.ExplosionTypeInfo.LoadFromINI(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.GSEndor.#ctor(SWEndor.Scenarios.GameScenarioManager)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.Components.MeshData.#ctor(System.String,System.String,System.String,System.Single,MTV3D65.CONST_TV_BLENDINGMODE,System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Sound.SoundManager.InstAddSyncPoint.Process(SWEndor.Sound.SoundManager)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Terminal.TConsole.Execute(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.FileFormat.INI.INIFile.INISection.GetLine(System.String)~SWEndor.FileFormat.INI.INIFile.INISection.INILine")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~P:Primrose.Primitives.Factories.AFactoryObject.ID")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ProjectileTypes.ProjectileTypeInfo.SaveToINI(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.TokenTypes.Expressions.Function.Evaluate(SWEndor.Scenarios.Scripting.Expressions.Context)~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Sound.SoundManager.Load")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.AtmosphereInfo.LoadDefaults(System.Boolean,System.Boolean)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.FileFormat.INI.INIFile.SetStringValue(System.String,System.String,System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.Components.DebrisSpawnerData.SaveToINI(SWEndor.FileFormat.INI.INIFile,System.String,System.String,SWEndor.ActorTypes.Components.DebrisSpawnerData[])")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ActorTypes.Components.SoundSourceData.SaveToINI(SWEndor.FileFormat.INI.INIFile,System.String,System.String,System.String,SWEndor.ActorTypes.Components.SoundSourceData[])")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Core.Session.Tick")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Models.ExplodeData.SaveToINI(SWEndor.FileFormat.INI.INIFile,System.String,System.String,System.String,SWEndor.Models.ExplodeData[])")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.ProjectileTypes.ProjectileTypeInfo.LoadFromINI(System.String)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerStringConcatRule:Implicit string concatenation allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.UI.Menu.Pages.LoadingScenario.PrintLoadingText~System.String")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Actor.ConfigureActorProperty(SWEndor.Core.Engine,SWEndor.Actors.ActorInfo,System.String,System.Boolean,SWEndor.Scenarios.Scripting.Expressions.Val@)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Actor.GetProperty(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Actor.SetProperty(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Actor.Spawn(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Actor.Squadron_Spawn(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.TokenTypes.Expressions.IndexedExpression.Evaluate(SWEndor.Scenarios.Scripting.Script,SWEndor.Scenarios.Scripting.Expressions.Context)~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.AI.ParseAction(SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.AI.Actions.ActionInfo")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Audio.SetMusic(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Audio.SetMusicDyn(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Audio.SetMusicLoop(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.AddFaction(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetShipCount(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetShipLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetShipSpawnLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetStructureCount(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetStructureLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetStructureSpawnLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetWingCount(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetWingLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.GetWingSpawnLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.MakeAlly(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.MakeEnemy(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.SetShipLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.SetShipSpawnLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.SetStructureLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.SetStructureSpawnLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.SetWingLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Faction.SetWingSpawnLimit(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.AddEvent(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.GetGameStateB(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.GetGameStateF(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.GetGameStateS(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.GetRegisterCount(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.SetGameStateB(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.SetGameStateF(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.GameState.SetGameStateS(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Messaging.MessageText(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Scripting.CallScript(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Scripting.GetArrayElement(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.UI.SetUILine1Text(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.UI.SetUILine2Text(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.UI.SetUILine3Text(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Expressions.TokenTypes.Expressions.ForEachStatement.Evaluate(SWEndor.Scenarios.Scripting.Script,SWEndor.Scenarios.Scripting.Expressions.Context)")]

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Script.WriteVar(System.String,SWEndor.Scenarios.Scripting.Expressions.Val)")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.Scripting.CallScriptX(SWEndor.Scenarios.Scripting.Expressions.Context,SWEndor.Scenarios.Scripting.Expressions.Val[])~SWEndor.Scenarios.Scripting.Expressions.Val")]
[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HeapAnalyzerBoxingRule:Value type to reference type conversion causing boxing allocation", Justification = "<Pending>", Scope = "member", Target = "~M:SWEndor.Scenarios.Scripting.Functions.ActorFns.ConfigureActorProperty(SWEndor.Core.Engine,SWEndor.Actors.ActorInfo,System.String,System.Boolean,Primrose.Expressions.Val@)")]

